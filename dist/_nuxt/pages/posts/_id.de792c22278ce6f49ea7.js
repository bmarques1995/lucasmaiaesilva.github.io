webpackJsonp([0],{"/eDf":function(s,a,e){"use strict";a.a={props:["url"],data:function(){return{twitterUrl:"https://twitter.com/intent/tweet?text=&quot;&quot;%20"+this.url+"%20via%20@lucasmaiaesilva&amp;hashtags=",facebookUrl:"https://www.facebook.com/sharer/sharer.php?u="+this.url,gPlusUrl:"https://plus.google.com/share?url="+this.url}}}},"38oU":function(s,a,e){"use strict";a.a={name:"vue-disqus",props:{shortname:{type:String,required:!0},identifier:{type:String,required:!1},url:{type:String,required:!1},title:{type:String,required:!1},remote_auth_s3:{type:String,required:!1},api_key:{type:String,required:!1},sso_config:{type:Object,required:!1}},mounted:function(){if(window.DISQUS)return void this.reset(window.DISQUS);this.init()},methods:{reset:function(s){var a=this;s.reset({reload:!0,config:function(){a.setBaseConfig(this)}})},init:function(){var s=this,a=this;window.disqus_config=function(){a.setBaseConfig(this)},setTimeout(function(){var a=document,e=a.createElement("script");e.setAttribute("id","embed-disqus"),e.setAttribute("data-timestamp",+new Date),e.type="text/javascript",e.async=!0,e.src="//"+s.shortname+".disqus.com/embed.js",(a.head||a.body).appendChild(e)},0)},setBaseConfig:function(s){var a=this;s.page.identifier=this.identifier||this.$route.path||window.location.pathname,s.page.url=this.url||this.$el.baseURI,this.title&&(s.page.title=this.title),this.remote_auth_s3&&(s.page.remote_auth_s3=this.remote_auth_s3),this.key&&(s.page.api_key=this.key),this.sso_config&&(s.sso=this.sso_config),s.callbacks.onReady=[function(){a.$emit("ready")}]}}}},B3Eq:function(s,a){s.exports='<section><h1>Usando Markdown</h1>\n<p>Este é o primeiro post do blog, sei que ainda tenho muito a melhorar, mas até lá, a maioria dos meus posts serão sobre ferramentas que usei para a criação deste humilde espaço para disseminação do conhecimento, e o primeiro assunto que gostaria de abordar é o markdown (que inclusive estou usando neste momento para escrever este post), mas antes de começar gostaria de agradecer todos que fizeram isso possível, <a href="https://github.com/flipggs">Felipe Siqueira</a>, <a href="https://github.com/willianjusten">Willian Justen</a>, <a href="https://github.com/mvfsilva">Marcus Silva</a>, <a href="https://github.com/jjaderg">Jader Gomes</a>, <a href="https://github.com/YanMagale">Yan Magalhães</a>, <a href="https://github.com/gabrielazevedo">Gabriel Azevedo</a>,  <a href="http://github.com/rafaelrmou">Rafael Moura</a> que mantém o site <a href="http://www.studyxnet.com/">studyxnet</a>, e toda a galera do DevsGroup, que além de grandes amigos são ótimos programadores e podem ter certeza que ouvirão falar muito sobre essa galera.</p>\n<p>Bom sem mais papo furado vamos dar início ao post.</p>\n<h2>Filosofia</h2>\n<p>Segundo a <a href="http://daringfireball.net/projects/markdown/">documentação</a> oficial feita por John Gruber (um dos criadores), o Markdown foi criado para ser um padrão de documentação mais <em>fácil de ler</em> e <em>fácil de escrever</em> possível. Essa facilidade em legibilidade é resultado de um padrão de escrita estudado cuidadosamente, e criado então utilizando-se de pontuações e caracteres concatenados a escrita dando assim a formatação desejada aos itens em questão.</p>\n<h2>Onde Usar?</h2>\n<p>Bom o Markdown pode ser usado em qualquer projeto que envolva escrita de conteúdo assim como um livro, um blog, a documentação de software, currículos, etc.</p>\n<p>O próprio Github, usa o Markdown para que seus usuários possam documentar seus projetos</p>\n<h2>Sintaxe</h2>\n<h3>Títulos</h3>\n<pre><code class="language-md"><span class="hljs-section"># Este é o título principal ou &lt;h1&gt;</span>\n<span class="hljs-section">## Esté é o subtítulo ou &lt;h2&gt;</span>\n<span class="hljs-section">### Sub Subtítulo &lt;h3&gt;</span>\n<span class="hljs-section">#### &lt;h4&gt; </span>\n</code></pre>\n<blockquote>\n<h1>Este é o título principal ou <h1></h1>\n<h2>Esté é o subtítulo ou <h2></h2>\n<h3>Sub Subtítulo <h3></h3>\n<h4><h4></h4>\n</blockquote>\n<h3>Elementos de linha</h3>\n<pre><code class="language-md"><span class="hljs-emphasis">*Este texto ficará itálico*</span>\n<span class="hljs-emphasis">_Este também estará itálico_</span>\n<span class="hljs-strong">**Este ficará em negrito**</span>\n<span class="hljs-strong">__Este também estará em negrito__</span>\n<span class="hljs-emphasis">_Você pode **combinar** eles também_</span>\n</code></pre>\n<blockquote>\n<p><em>Este texto ficará itálico</em></p>\n<p><em>Este também estará itálico</em></p>\n<p><strong>Este ficará em negrito</strong></p>\n<p><em>Você pode <strong>combinar</strong> eles também</em></p>\n</blockquote>\n<h3>Listas</h3>\n<h4>Não ordenadas</h4>\n<pre><code>* Item 1\n* Item 2\n\t* Item 2a\n\t* Item 2b\n</code></pre>\n<blockquote>\n<ul>\n<li>\n<p>Item 1</p>\n</li>\n<li>\n<p>Item 2</p>\n<ul>\n<li>\n<p>Item 2a</p>\n</li>\n<li>\n<p>Item 2b</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4>Ordenadas</h4>\n<pre><code>1. Item 1\n2. Item 2\n\t* Item 2a\n\t* Item 2b\n</code></pre>\n<blockquote>\n<ol>\n<li>\n<p>Item 1</p>\n</li>\n<li>\n<p>Item 2</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>Item 2a</p>\n</li>\n<li>\n<p>Item 2b</p>\n</li>\n</ul>\n</blockquote>\n<h3>Imagens</h3>\n<pre><code class="language-md">![<span class="hljs-string">GitHub Logo</span>](<span class="hljs-link">/images/logo.png</span>)\n</code></pre>\n<blockquote>\n<p><img src="/posts/usando-markdown/Octocat.png" alt="GitHub Logo"></p>\n</blockquote>\n<p><em>O que aparece entre colchetes é o que seria renderizado como o atributo <strong>alt</strong> do html</em></p>\n<h3>Links</h3>\n<pre><code class="language-md">[<span class="hljs-string">GitHub</span>](<span class="hljs-link">http://github.com</span>) - link com um texto atrelado a ele \n</code></pre>\n<blockquote>\n<p><a href="http://github.com">GitHub</a> - link com um texto atrelado a ele</p>\n</blockquote>\n<h3>Blockquotes (citação)</h3>\n<pre><code>Seu madruga disse uma vez:\n\n&gt; Não há nada mais trabalhoso,\n&gt; que viver sem trabalhar\n\n</code></pre>\n<blockquote>\n<p><em>&quot;Não há nada mais trabalhoso,</em></p>\n<p><em>que viver sem trabalhar&quot;</em></p>\n</blockquote>\n<h3>código inline</h3>\n<pre><code>Eu acho que não deveríamos usar a tag `&lt;br /&gt;` nos nossos projetos\n</code></pre>\n<blockquote>\n<p>Eu acho que não deveríamos usar a tag <code>&lt;br /&gt;</code> nos nossos projetos</p>\n</blockquote>\n<h2>Conclusão</h2>\n<p>Markdown realmente é um padrão poderoso de marcação de documentos e deve realmente ser usado quando for requisitado, pois como vimos é muito simples a sua utilização e ele também é muito bem documentado.</p>\n<p><em>Obs: não deixem de deixar um feedback nos comentários, para saber se devo continuar escrevendo e sobre qual assunto. Muito Obrigado pela atenção :)</em></p>\n</section>\n'},"Bo5/":function(s,a,e){var o=e("hhhU");"string"==typeof o&&(o=[[s.i,o,""]]),o.locals&&(s.exports=o.locals);e("rjj0")("2bc20589",o,!0)},DIWL:function(s,a){s.exports='<section><h1>Motivos para você aprender a falar inglês</h1>\n<p>Faaaaaallllllaaaa Galera (não copiei isso de ninguém hahahha), resolvi criar um post para ressaltar a importância de aprendermos inglês principalmente nos dias de hoje, como esse é um assunto meio óbvio, resolvi trazer alguns dados científicos encapsulados comigo para ilustrar a importância dessa skill.</p>\n<h2>English is in everything</h2>\n<p>Existe uma premissa que fala que o inglês é um idioma universal, e eu acredito que essa é a maior verdade de todas. Alguns fatos sobre o idioma:</p>\n<ul>\n<li>80% dos empresários internacionais, dizem que o inglês foi necessário para que fossem bem sucedidos em seus respectivos negócios</li>\n<li>O mercado Global de aprendizado de Inglês é estimado em $63 bilhões</li>\n<li>O inglês é usado em 85% das Organizações internacionais</li>\n<li>Estima-se que em 2020, 2 bilhões de pessoas estarão aprendendo inglês, ou seja, 100% a mais que nos dias de hoje</li>\n</ul>\n<p>Fonte: <a href="http://english.com/english_learning_infographic">english.com</a></p>\n<h2>Na internet</h2>\n<blockquote>\n<p>Atualmente 55% da Internet está em Inglês.</p>\n</blockquote>\n<p><img src="/posts/learn-english/ai-eu-te-pergunto.jpg" alt="Aí eu te pergunto"></p>\n<p>Nós programadores, quando encontramos um problema com alguma configuração de ambiente, ou alguma linguagem de programação e precisamos encontrar uma solução para aquele problema e recorremos a mecanismos de busca para isso, em qual idioma tenho mais chances/ mais soluções variadas/ mais conteúdo disponível para me ajudar?</p>\n<h2>Algumas curiosidades sobre o idioma</h2>\n<ol>\n<li>A letra mais usada no Inglês é a letra &quot;e&quot;</li>\n<li>A vogal mais usada no Inglês é a letra &quot;e&quot;, seguida da letra &quot;a&quot;</li>\n<li>A consoante mais usada no Inglês é a letra &quot;r&quot;, seguida da letra &quot;t&quot;</li>\n<li>Toda sílaba em Inglês obrigatoriamente tem que possuir uma vogal (sonora). Nem todas sílabas possuem consoantes</li>\n<li>Só existem duas palavras em Inglês com o sufixo &quot;gry&quot; angry e hungry</li>\n<li>No Inglês não existem acentos</li>\n<li>Em inglês o símbolo @ significa &quot;at&quot;, que é uma analogia a qual provedor pertence aquela conta</li>\n</ol>\n<blockquote>\n<p>Uma outra curiosidade é que a Google mantém um projeto chamado Duolingo, que usa o Re-Captcha (aquelas palavras que digitamos para provarmos que não somos robôs), para criar frases que foram digitalizadas de livros antigos e não reconhecidos pelo mecanismo de reconhecimento de escrita as vezes por que estavam velhos e desgastados demais para isso, e com essa proposta ela também ensina outros idiomas aqueles que não podem pagar cursos e dificilmente teriam acesso a esse conteúdo, e são esses &quot;aprendizes&quot; que fazem essa tradução.</p>\n</blockquote>\n<h2>Como posso aprender/praticar?</h2>\n<p>Primeiramente eu sugiro um bom curso, mas um curso em que você se identifique com a metodologia usada e se sinta confortável para aprender. Se não possuir recursos financeiros para isso temos alguns cursos gratuitos, como por exemplo o próprio <a href="https://pt.duolingo.com/">Duolingo</a> citado acima e temos também o <a href="http://isf.mec.gov.br/ingles/pt-br/">my-english</a> que inclusive é apoiado pelo MEC e usa a nota do ENEM para isso.</p>\n<p>Mas existem relatos de pessoas que aprenderam Inglês de outras maneiras vamos a elas:</p>\n<ul>\n<li>79% das pessoas dizem que aprenderam Inglês com a ajuda de filmes</li>\n</ul>\n<p><img src="/posts/learn-english/filmes.jpg" alt="Referências de filmes em inglês"></p>\n<ul>\n<li>82% das pessoas dizem que aprenderam Inglês com a ajuda de programas de TV</li>\n</ul>\n<p><img src="/posts/learn-english/tvshows.jpg" alt="Referências de programas de tv em inglês"></p>\n<ul>\n<li>80% das pessoas dizem que aprenderam Inglês com a ajuda de músicas</li>\n</ul>\n<p><img src="/posts/learn-english/music.jpg" alt="Referências de músicas em inglês"></p>\n<ul>\n<li>56% das pessoas dizem que aprenderam Inglês com a ajuda de Jogos e 55% com a ajuda de Revistas em quadrinhos(Comic Books)</li>\n</ul>\n<p><img src="/posts/learn-english/gamesandcomics.jpg" alt="Referências de Jogos e ComicBooks em inglês"></p>\n<h2>Conclusão</h2>\n<p>Galera como esse blog destina-se a ajudar pessoas em suas carreiras, achei super importante fazer um post sobre esse assunto, gostaria de agradecer a todos pelos feedbacks, vocês são demais. :)</p>\n</section>\n'},F8v8:function(s,a,e){"use strict";var o=function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("section",{staticClass:"share"},[e("div",{staticClass:"share-title"},[s._v("Compartilhe esse post :)")]),e("div",{staticClass:"share-icons"},[e("a",{attrs:{"aria-label":"Compartilhe no Twitter",href:s.twitterUrl,onclick:"window.open(this.href, 'twitter-share', 'width=550,height=235');return false;",title:"Compartilhe no Twitter"}},[e("img",{attrs:{src:"/icons/twitter-icon.png",alt:"compartilhe no twitter"}})]),e("a",{attrs:{"aria-label":"Compartilhe no Facebook",href:s.facebookUrl,onclick:"window.open(this.href, 'facebook-share','width=580,height=296');return false;",title:"Compartilhe no Facebook"}},[e("img",{attrs:{src:"/icons/facebook-icon.png",alt:"compartilhe no facebook"}})]),e("a",{attrs:{"aria-label":"Compartilhe no Google Plus",href:s.gPlusUrl,onclick:"window.open(this.href, 'google-plus-share', 'width=490,height=530');return false;",title:"Compartilhe no Google+"}},[e("img",{attrs:{src:"/icons/gplus-icon.png",alt:"compartilhe no google plus"}})])])])},n=[],t={render:o,staticRenderFns:n};a.a=t},KlLE:function(s,a,e){a=s.exports=e("FZ+f")(!1),a.push([s.i,".share{font-weight:700}.share-title{margin:32px 0;margin:2rem 0;font-size:32px;font-size:2rem;text-align:center}.share-icons{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.share-icons a{margin:0 8px;margin:0 .5rem}@media screen and (min-width:768px){.share{display:-webkit-box;display:-ms-flexbox;display:flex}.share-title{margin:0;margin-right:3rem}}",""])},KxFy:function(s,a,e){"use strict";var o=function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("article",{staticClass:"post container"},[e("div",{staticClass:"post-content"},[e("div",{domProps:{innerHTML:s._s(s.postContent)}}),e("Share",{attrs:{url:s.url}}),e("disqus",{ref:"disqus",attrs:{shortname:s.disqusShortname,identifier:s.disqusId}})],1)])},n=[],t={render:o,staticRenderFns:n};a.a=t},N5i6:function(s,a){s.exports='<section><h1>Criando uma paleta de cores harmônica com Illustrator</h1>\n<p>Fala galera, resolvi fazer mais um daqueles posts utilitários, <s>que não servem pra nada</s> que servem para referência para consultas posteriores.</p>\n<p>Quando fazemos algum tipo de desenho no Adobe Illustrator de vez em quando passamos por alguns tipos de situação em que precisamos dar vida aos personagens ou objetos, dando cor a eles.</p>\n<p>O problema é que, para termos um Design &quot;clean&quot;, temos que ter um certo tipo de harmonia entre esses elementos, não podemos simplesmente usar um aparato de cores (muitas das vezes) sem sentido. Essa harmonia funciona muito bem para que tenhamos um elemento chamativo por ser bonito, e não por ser estranho. Para que fique mais claro o que estou querendo dizer, segue alguns exemplos.</p>\n<p>Veja um exemplo de um personagem colorido sem harmonia em suas cores:</p>\n<p><img src="/posts/paleta-cores-illustrator/soldier-bad-color.png" alt="Sem coloração"></p>\n<h2>Criando a paleta de Cores</h2>\n<p>Para criar a paleta de cores primeiramente precisaremos das cores primárias nas quais iremos aplicar ao personagem. É importante destacar que as cores escolhidas devem ser as cores nas quais iremos utilizar nas características principais do desenho ou logo etc.</p>\n<p>Crie quadrados e preencha-os com as cores desejadas deixe um espaçamento entre eles como mostra o desenho abaixo:</p>\n<p><img src="/posts/paleta-cores-illustrator/cores-primarias.jpg" alt="Cores Primárias"></p>\n<p>No exemplo foram criadas 3 cores, mas você pode usar quantas cores quiser, mas quanto maior o número de cores que você utilizar, menor é a chance de seu desenho ter uma boa harmonia entre as cores e menor é a chance de ele ficar bonito. Em outras palavras menos é mais.</p>\n<p>Em seguida, basta selecionar os três quadrados ao mesmo tempo e ir até o menu <em>object / Blend / Blend Options...</em>. Ao acessar esse menu irá aparecer uma janela de configuração, neste caso deixaremos o <em>Spacing</em> como <em>Specified Steps</em> pois queremos mostrar os quadros em um efeito de transição o valor desse atributo como 2 (número de quadros).</p>\n<p><img src="/posts/paleta-cores-illustrator/window-blend-tool.jpg" alt="Painel config Blend Options"></p>\n<p>Depois disso basta clicar na ferramenta <strong>Blend Tool</strong> que fica na caixa de ferramentas ou pressionar <strong>w</strong> e então é só clicar uma vez em cada quadrado que você criou que a mágica acontece.</p>\n<p><img src="/posts/paleta-cores-illustrator/paleta-cores.jpg" alt="Paleta de cores"></p>\n<blockquote>\n<p>Dica Deixe sempre a paleta de cores próxima ao seu desenho para uma melhor produtividade</p>\n</blockquote>\n<p><img src="/posts/paleta-cores-illustrator/draw-colored.jpg" alt="Desenho"></p>\n<p>E como ficaria aquele desenho que usamos de exemplo anteriormente com o tratamento devido? Ficaria assim:</p>\n<p><img src="/posts/paleta-cores-illustrator/soldier-good-color.png" alt="Como coloração"></p>\n<p>A harmonia entre as cores torna o personagem mais &quot;apresentável&quot; pois não é agressivo aos olhos o uso de suas cores. Uma outra dica importante é que sempre que for dar uma noção de profundidade de alguma parte do personagem usa-se uma cor mais escura, diferente de background\'s por exemplo, onde quanto mais distante o elemento mais claro ele fica para nos dar a sensação de que está se perdendo no horizonte.</p>\n<p>Referência: <a href="http://design.tutsplus.com/tutorials/how-to-design-and-vector-a-set-of-character-poses-for-a-video-game--vector-5920">How to Design and Vector a Set of Character Poses for a Video Game</a></p>\n<h2>Conclusão</h2>\n<p>O uso das cores é talvez, mais importante que o próprio formato de um desenho, devemos saber usá-las com bastante sabedoria. Se você não possui nenhum <em>feelling</em> para o Design, aconselho sempre a olhar <strong>exemplos</strong> de artes bem feitas. O <a href="https://dribbble.com/">dribbble</a>, <a href="https://www.behance.net/">behance</a> e <a href="http://www.awwwards.com/">awwwards</a> por exemplo são bons lugares para se buscar <strong>inspiração</strong> (sendo o awwwards voltado para layouts de websites). Mas tomem muito cuidado para não copiar o trabalho dos outros.</p>\n</section>\n'},OIlh:function(s,a){s.exports='<section><h1>MongoDB - Usando o Mongo Shell</h1>\n<h2>Introdução</h2>\n<p>Fala galera, vamos com mais um post de MongoDB, se você é novo no Blog e deseja acompanhar a série desde o início pode fazê-lo clicando <a href="http://lucasmaiaesilva.com.br/series">aqui</a>.</p>\n<p>Como dito anteriormente na série agora vamos iniciar com os posts mais técnicos, porque já abordamos superficialmente os assuntos mais teóricos, então vamos lá.</p>\n<h2>Mongo Shell</h2>\n<p>Iremos usar o Mongo Shell para testar query por query nos próximos posts da série, para isso basta que você tenha feito a <a href="https://docs.mongodb.org/manual/installation/">instalação</a> do MongoDB em sua máquina e também o <code>mongod</code> ativado em sua máquina, pois é ele que faz o &quot;host&quot; para acessar o banco, em outras palavras é ele quem levanta o serviço do Mongo, o banco de fato. Para fazer isso abra duas janelas ou abas e execute os comandos.</p>\n<p>Na primeira janela/aba do terminal:</p>\n<pre><code class="language-sh">mongod\n</code></pre>\n<p>Esse comando ativa o mongod.</p>\n<p>Em seguida vamos ativar o Mongo Shell:</p>\n<pre><code class="language-sh">mongo\n</code></pre>\n<p>É importante que você siga essa sequência, pois o Mongo Shell não funciona sem o mongod aberto, pois como dito anteriormente o <code>mongod</code> é o serviço que vai nos permitir acessar e usar o banco, então ficamos basicamente assim:</p>\n<p><a href="/posts/serie-mongo-db/mongo-mongod.png"><img src="/posts/serie-mongo-db/mongo-mongod.png" alt="mongo e mongodb"></a></p>\n<p>Na esquerda temos o log do <code>mongod</code> onde temos informações do que está acontecendo com o servidor como por exemplo, quantas conexões foram abertas, inserções e consultas etc. Para saber mais sobre o mongod <a href="https://docs.mongodb.org/manual/reference/program/mongod/">clique aqui</a>.</p>\n<p>Na direita temos o <code>mongo shell</code> que é o local onde iremos digitar os comandos e onde iremos seguir nossa jornada não relacional. Para ter uma melhor visualização da imagem clique nela.</p>\n<p>Bom agora que já vimos como configurar. Vamos aos comandos.</p>\n<h2>Comandos Mongo Shell</h2>\n<p>O primeiro comando que devemos entender é o <code>showdbs</code>, como o nome diz ele retorna todos os Bancos de Dados existentes em sua máquina.</p>\n<pre><code class="language-sh">$ show dbs\n<span class="hljs-comment"># blog     0.078GB</span>\n<span class="hljs-comment"># test     0.078GB</span>\n<span class="hljs-comment"># escola   0.078GB</span>\n</code></pre>\n<p>Em seguida usamos o comando <code>use</code> seguido do nome do banco de dados que queremos acessar.</p>\n<pre><code class="language-sh">$ use escola\n<span class="hljs-comment"># switched to db escola</span>\n</code></pre>\n<blockquote>\n<p>obs: Se não existir um banco de dados com o nome passado por parâmetro depois do use, o MongoDB cria um novo Banco com o nome referenciado.</p>\n</blockquote>\n<p>Depois de acessado o banco podemos ver quantas <em>collections</em> existem naquele banco.</p>\n<pre><code class="language-sh">$ show collections\n<span class="hljs-comment"># professores</span>\n<span class="hljs-comment"># alunos</span>\n<span class="hljs-comment"># eventos</span>\n</code></pre>\n<p>É importante evitarmos e se possível, aniquilarmos o número de dependências entre as collections. Pois estamos trabalhando em um modo não relacional lembram?</p>\n<p>Legal, mas e se eu tiver os arquivos prontos para o banco mas em um arquivo separado. Como faço para importar esses dados?</p>\n<h2>Importando database no MongoDB</h2>\n<p>A sintaxe para importar os dados no MongoDB é:</p>\n<p><code>mongoimport -d [nomeDB] -c [nomeCollection] [arquivo.js]</code></p>\n<pre><code class="language-sh">mongoimport -d curso -c turmas turmas.js\n</code></pre>\n<p>Ao executarmos o comando acima, o Mongo Shell procura o arquivo <code>turmas.js</code> e o importa, criando também o banco <code>curso</code> e a <em>collection</em> <code>turmas</code> caso não haja nenhum.</p>\n<p>Para saber mais sobre o mongoimport <a href="https://docs.mongodb.org/v2.4/reference/program/mongoimport/#bin.mongoimport">clique aqui</a>.</p>\n<h2>Exportando database no MongoDB</h2>\n<p>Para exportar os dados a sintaxe é basicamente a mesma, porém com devemos informar o caminho do arquivo.</p>\n<p><code>mongoexport -d [nomeDB] -c [nomeCollection] --out [dirExport/arquivo.js]</code></p>\n<pre><code class="language-sh">mongoexport -d curso -c turmas --out backups/01-10-2015/turmas.json\n</code></pre>\n<p>Para saber mais sobre o export <a href="https://docs.mongodb.org/manual/reference/program/mongoexport/">clique aqui</a>.</p>\n<p>Podemos também adicionar uma query aos comandos se quisermos pegar ou exportar somente parte do arquivo, isso mesmo, eu sei é genial.</p>\n<pre><code class="language-sh">mongoexport -d sistema -c usuarios -q <span class="hljs-string">"{ email: \'lucasmaiaesilva@gmail.com\' }"</span> --out backup/lucas.json\n</code></pre>\n<p>Se você ainda não sabe trabalhar as queries de consulta, não se preocupe pois o próximo post da série irá explicar isso com muito mais detalhes. Mas resumindo o exemplo acima irá varrer toda a <em>collection</em> usuarios e pegar o <em>document</em> ou os <em>documents</em> que tiverem o campo de email <a href="mailto:lucasmaiaesilva@gmail.com">lucasmaiaesilva@gmail.com</a>.</p>\n<h2>Conclusão</h2>\n<p>Este post foi criado para explicar melhor a estrutura do workflow do Mongo através do Mongo Shell, pois entender isso, é extremamente importante para testarmos nossas queries. Se tiverem alguma dúvida mandem nos comentários, pois a partir daqui, usaremos muito essa estrutura do Mongo Shell. É isso, nos vemos na próxima.</p>\n</section>\n'},PmdM:function(s,a){s.exports='<section><h1>Sincronizando o fork feito pelo Github</h1>\n<p>Quando falamos de programação Open Source não podemos deixar de falar no Github, que hoje em dia está sendo praticamente uma &quot;rede social de programadores&quot; voltado para o que interessa, o código. Se você não conhece, procure, pois é uma das coisas mais importantes que um programador pode ter, com ele é possível visualizar códigos escritos por outros programadores, documentações e muito mais. E é gratis.</p>\n<p>Quando queremos contribuir com algum projeto que não é nosso, geralmente temos que &quot;garfar&quot; aquele projeto (fork), e com isso todas as alterações que fazemos naquele projeto podem ser &quot;commitadas&quot; sem nenhum problema pois após o fork, o Github irá tratar o projeto como seu e seu repositório em um primeiro momento não se comunica com o repositório original. Para forkar o projeto basta clicar em fork.</p>\n<p><img src="/posts/sinc-fork-github/fork.png" alt="Fork no Github"></p>\n<p>Mas aí nos deparamos com 2 problemas correto? Como eu disse anteriormente, em um primeiro momento, os dois projetos (original e o que foi feito o fork) não se comunicam então temos dois tipos de situação para sincronizá-los.</p>\n<p>Na primeira situação, o projeto original está desatualizado em relação ao projeto em que foi feito o fork. Nesse caso o procedimento para sincronizá-los é fazer o <a href="https://help.github.com/articles/using-pull-requests/">PR ou Pull Request</a>.</p>\n<p>E na segunda situação acontece justamente o contrário. Suponhamos que você fez o contrário, você &quot;forkou&quot; o projeto de alguém e depois percebeu que essa pessoa atualizou o projeto original com alguma feature incrível que você não poderia viver sem. E agora como proceder?</p>\n<h2>Configurando repositório remoto</h2>\n<p>Primeiramente executamos o comando abaixo para ver a lista de repositórios configurados em seu fork.</p>\n<pre><code class="language-sh">git remote -v\n<span class="hljs-comment"># origin  https://github.com/SEU_USUARIO/SEU_FORK.git (fetch)</span>\n<span class="hljs-comment"># origin  https://github.com/SEU_USUARIO/SEU_FORK.git (push)</span>\n</code></pre>\n<p>Vemos que como ele só possui uma referência para fetch e outra para push e ambas em seu próprio repositório temos que executar o seguinte comando para adicionar o repositório com o projeto original</p>\n<pre><code class="language-sh">git remote add upstream https://github.com/USUARIO_ORIGINAL/REPOSITORIO_ORIGINAL.git\n</code></pre>\n<p>Ao executar novamente o comando para listar os repositório vemos que o repositório original foi incluso no processo.</p>\n<pre><code class="language-sh">git remote -v\n<span class="hljs-comment"># origin  https://github.com/SEU_USUARIO/SEU_FORK.git (fetch)</span>\n<span class="hljs-comment"># origin  https://github.com/SEU_USUARIO/SEU_FORK.git (push)</span>\n<span class="hljs-comment"># upstream https://github.com/USUARIO_ORIGINAL/REPOSITORIO_ORIGINAL.git (fetch)</span>\n<span class="hljs-comment"># upstraem https://github.com/USUARIO_ORIGINAL/REPOSITORIO_ORIGINAL.git (push)</span>\n</code></pre>\n<p>Bom agora que já está tudo configurado basta sincronizar.</p>\n<h2>Sincronizando o Fork</h2>\n<p>Primeiramente precisamos executar um comando que procure por atualizações no projeto original e as armazene em um branch local <code>upstream/master</code>.</p>\n<pre><code class="language-sh">git fetch upstream\n<span class="hljs-comment"># remote: Counting objects: 75, done.</span>\n<span class="hljs-comment"># remote: Compressing objects: 100% (53/53), done.</span>\n<span class="hljs-comment"># remote: Total 62 (delta 27), reused 44 (delta 9)</span>\n<span class="hljs-comment"># Unpacking objects: 100% (62/62), done.</span>\n<span class="hljs-comment"># From https://github.com/USUARIO_ORIGINAL/REPOSITORIO_ORIGINAL.git</span>\n<span class="hljs-comment">#  * [new branch]      master     -&gt; upstream/master</span>\n</code></pre>\n<p>Em seguida nos asseguramos que estamos no <a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">branch master</a> do projeto.</p>\n<pre><code class="language-sh">git checkout master\n<span class="hljs-comment"># Switched to branch \'master\'</span>\n</code></pre>\n<p>E para finalizar só precisamos fazer o merge de <code>upstream/master</code> para o seu branch local <code>master</code>.</p>\n<pre><code class="language-sh">git merge upstream/master\n<span class="hljs-comment"># Updating 34e91da..16c56ad</span>\n<span class="hljs-comment"># Fast-forward</span>\n<span class="hljs-comment">#  README.md                 |    5 +++--</span>\n<span class="hljs-comment">#  1 file changed, 3 insertions(+), 2 deletions(-)</span>\n</code></pre>\n<h2>Conclusão</h2>\n<p>Pra quem não usa esses comandos todos os dias é praticamente impossível guardar todos (eu mesmo jamais conseguiria), então criei esse post para servir de referência, os comandos foram tirados diretamente da documentação do Github, sempre que precisar (confie em mim, você vai precisar), esse post estará aqui para te auxiliar.</p>\n</section>\n'},RE5A:function(s,a,e){var o=e("KlLE");"string"==typeof o&&(o=[[s.i,o,""]]),o.locals&&(s.exports=o.locals);e("rjj0")("0ab90607",o,!0)},WyIT:function(s,a){s.exports='<section><h1>Como criar um modal simples sem Javascript</h1>\n<h2>Introdução</h2>\n<p>Recentemente precisei implementar uma &quot;modal box&quot; em minha <a href="http://lucasmaiaesilva.com.br/sobre/">página de portfolios do blog</a>, e tive um trabalhinho para fazê-lo, até que achei um post muito maneiro e prático para o processo. Então resolvi documentar o problema e não fazer mais disso um problema para mim, e espero que ajude a você também.</p>\n<p>Vamos lá.</p>\n<p>Em algumas das vezes quando estamos criando layouts ou protótipos, nos deparamos com a situação onde temos que criar uma nova página simplesmente para mostrar poucas informações, ou até mesmo para mostrar detalhes de alguma feature em um site/sistema web. Para resolver esse tipo de problema, muitas vezes a melhor solução é a criação de um modal.</p>\n<p>A janela em modal é uma janela que aparece como um elemento secundário (filho) no sistema para enfatizar algo contido ou requerido pelo seu elemento primário (pai). No quesito Web, é comum associarmos o modal como uma janela pop-up por exemplo.</p>\n<p>Na maioria das vezes, as janelas em modal suportam informações críticas então por isso, temos a prática de usar Javascript na criação do modal, mas o uso do Javascript na maioria das vezes não é a melhor solução para isso.</p>\n<p>Vamos a criação:</p>\n<h2>HTML</h2>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#abrirModal"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"abrirModal"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal"</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- conteúdo do modal aqui --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>Primeiramente criamos um link, esse link é referenciado por <code>abrirModal</code> é importante que ele venha com o prefixo <code>#</code> pois simboliza que estamos referenciando por id.</p>\n<p>Em seguida é só criar um elemento que irá armazenar esses elementos. No caso do exemplo utilizamos a <code>div</code>, mas você pode usar <code>section</code> ou qualquer outro elemento HTML que te seja mais favorável.</p>\n<p>Juntamente com a referência do id criamos uma classe <code>modal</code> que será o que iremos usar pra estilizar nosso elemento.</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#abrirModal"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"abrirModal"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#fechar"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Fechar"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fechar"</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Janela Modal<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Esta é uma simples janela de modal.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Você pode fazer qualquer coisa aqui, página de Login, pop-ups, ou formulários<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>Dentro do modal criamos o botão de fechar, como esse botão sentencia um outro id, não precisamos fazer mais nada com relação a mecânica das informações, pois ao clicar em fechar, trocamos o id de <code>abrirModal</code> para <code>fechar</code> essa troca já faz a mágica acontecer.</p>\n<h2>CSS</h2>\n<p>Agora que temos a nossa estrutura HTML, podemos estilizar nossa janela modal.</p>\n<pre><code class="language-css"><span class="hljs-selector-class">.modal</span> {\n  <span class="hljs-attribute">position</span>: fixed;\n  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">font-family</span>: Arial, Helvetica, sans-serif;\n  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(0,0,0,0.8);\n  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99999</span>;\n  <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;\n  <span class="hljs-attribute">-webkit-transition</span>: opacity <span class="hljs-number">400ms</span> ease-in;\n  <span class="hljs-attribute">-moz-transition</span>: opacity <span class="hljs-number">400ms</span> ease-in;\n  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">400ms</span> ease-in;\n  <span class="hljs-attribute">pointer-events</span>: none;\n}\n</code></pre>\n<p>As linhas <code>2 até 6</code>, são para posicionar o modal afixadamente no centro da tela. A comando da linha <code>8</code> serve para sentenciar o background, escurecendo o fundo para enfatizar a janela, que irá aparecer centralizada na tela. Na linha <code>9</code> a propriedade <code>z-index</code> assegura que a janela irá aparecer por cima das outras, como se fosse um sistema de camadas do Photoshop. A linha <code>10</code> seta a opacidade do modal, removendo sua visibilidade por <em>default</em> e as linhas <code>11 a 13</code> são os comandos de transição, para que essa mudança de transição tenha um <em>timing</em> apropriado e não ocorra do nada.</p>\n<h3>Funcionalidades e aparência</h3>\n<p>Primeiramente precisamos formatar nossa classe modal para que no momento em que ela estiver evidênciada ela apareça na tela. Lembra da opacidade 0 anteriormente? Ela serve pra isso. Vamos ao código.</p>\n<pre><code class="language-css"><span class="hljs-selector-class">.modal</span><span class="hljs-selector-pseudo">:target</span> {\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">pointer-events</span>: auto;\n}\n</code></pre>\n<p>A pseudo-classe <code>:target</code> representa um único elemento, se existir algum <code>id</code> fragmentado na URL, ela será formatado conforme os atributos passados no formato da classe acima. Para saber mais sobre o <code>:target</code> <a href="https://developer.mozilla.org/pt-BR/docs/Web/CSS/%3Atarget">clique aqui</a>.</p>\n<p>A propriedade <code>pointer-events</code> permite autores controlarem sob qualquer circustancia(se houver) um elemento gráfico particular podendo ser o alvo do evento do mouse. Ela configurada como <code>auto</code> significa que o mouse irá tratar todos os eventos não evidenciados como simples partes do site, ou seja, nosso modal será uma parte do site, assim como todo o restante dele. Para saber mais sobre <code>pointer-events</code> <a href="https://developer.mozilla.org/pt-BR/docs/Web/CSS/pointer-events">clique aqui</a>.</p>\n<p>Podemos também para finalizar, estilizar nossa modal para que ela fique mais apresentável usando o nosso bom e simples <code>css</code>.</p>\n<pre><code class="language-css"><span class="hljs-selector-class">.modal</span> &gt; <span class="hljs-selector-tag">div</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;\n  <span class="hljs-attribute">position</span>: relative;\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10%</span> auto;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">20px</span>;\n  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;\n}\n</code></pre>\n<p><img src="/posts/criando-modal/modal-estilizado.png" alt="Modal box estilizado"></p>\n<h4>estilizando botão de fechar</h4>\n<pre><code class="language-css"><span class="hljs-selector-class">.fechar</span> {\n  <span class="hljs-attribute">position</span>: absolute;\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;\n  <span class="hljs-attribute">right</span>: -<span class="hljs-number">15px</span>;\n  <span class="hljs-attribute">top</span>: -<span class="hljs-number">20px</span>;\n  <span class="hljs-attribute">text-align</span>: center;\n  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;\n  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;\n  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ff4545</span>;\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#8d0000</span>;\n}\n</code></pre>\n<p>Veja como fica a arte final.</p>\n<p><img src="/posts/criando-modal/arte-final.png" alt="arte final modal box"></p>\n<p>Referência para este post <a href="http://www.webdesignerdepot.com/2012/10/creating-a-modal-window-with-html5-and-css3/">aqui</a>.</p>\n<h2>Onde usar modal boxes</h2>\n<p>Agora que já aprendemos um jeito prático de fazê-los vamos a uma breve introdução de onde podem ser aplicados.</p>\n<h3>Formulários de Login</h3>\n<p>Modal boxes são muito úteis para formulários de registro, pois o usuário não tem aquela terrível sensação de que está sendo &quot;empurrado&quot; para outra página sem necessidade, causando uma boa impressão aos visitantes.</p>\n<p><img src="/posts/criando-modal/modal_login.png" alt="formulario de login em modal"></p>\n<h3>Display imagens / vídeos</h3>\n<p>Um outro excelente modo de se usar modal é para mostrar imagens e vídeos (também conhecido como lightbox), permite que o usuário visualize de maneira mais focalizada o conteúdo de seu site sem abandonar a página.</p>\n<p><img src="/posts/criando-modal/modal_lightbox.png" alt="modal lightbox"></p>\n<h3>Feedback ao usuário em geral</h3>\n<p>Creio que essa seja a principal utilidade do modal, os chamados alerts dessa maneira são totalmente customizáveis e usados nos principais projetos atualmente.</p>\n<p><img src="/posts/criando-modal/modal_alerts.png" alt="modal alert"></p>\n<h2>Conclusão</h2>\n<p>As janelas em modal são realmente de fato muito úteis, porém como nenhuma tecnologia é bala de prata, deve-se saber exatamente quando e como utilizá-las, existem algumas situações que definitivamente não devemos ceder ao modal. Espero ter cumprido minha missão de auxiliá-los ou lembrá-los de algo presente no processo de criação. :)</p>\n</section>\n'},"YcK/":function(s,a){s.exports='<section><p>Fala Galera, como tem muitas pessoas me perguntando sobre o mesmo assunto, resolvi escrever um guia sobre o que eu usei para criar esse humilde espaço.</p>\n<p>Na realidade esse espaço resultado de um reaproveitamento de um <a href="https://github.com/willianjusten/will-jekyll-template">template</a>, que, assim como esse blog, é um projeto Open Source.</p>\n<h2>Papel e Caneta</h2>\n<p>A primeira coisa que eu fiz foi o sketch do Layout básico do blog, então resolvi postar sobre essa etapa também do processo, pois a considero a etapa mais importante de todas. Definitivamente não importa se você passar 80% do tempo de seu projeto simplesmente o planejando e os outros 20% &quot;codando&quot; (essa é a regra que eu criei baseada no princípio de um economista italiano chamado Vilfredo Pareto denominada lei de Pareto), mesmo assim, a sua produtividade será absurda pois assim temos uma visão completa sobre todas as etapas do processo, evitando praticamente todo o retrabalho.</p>\n<p>Em resumo planejamento é <strong>tudo</strong>.</p>\n<p>Segue uma foto que tirei do Sketch original do Blog.</p>\n<p><a href="http://lucasmaiaesilva.com.br/posts/tecnologias-que-usei-no-blog/sketch.jpg"><img src="/posts/tecnologias-que-usei-no-blog/sketch.jpg" alt="Sketch do blog"></a></p>\n<h2>Photoshop</h2>\n<p>Podem me chamar de antiquado, mas acho que Design e Desenvolvimento, não se misturam. Existem diversas ferramentas mas gosto de usar somente uma ferramenta para cada lado do cérebro. Quando crio, prefiro usar ferramenta de criação e quando programo gosto de usar ferramentas de programação. Acho que a maioria dos programadores que querem fazer tudo uma etapa só, meio que se perdem diversas vezes durante o processo.</p>\n<p>Basicamente usei o Photoshop para criar o design de como ficaria a interface do projeto.</p>\n<h2>Jekyll</h2>\n<p><img src="/posts/tecnologias-que-usei-no-blog/jekyll-site.jpg" alt="WebSite Jekyll"></p>\n<p>Jekyll é um gerador estático escrito em Ruby para sites/blogs simples.</p>\n<p>Como assim estático? Bom, ele não possui banco de dados e todas as suas features são escritas no próprio código e então são geradas em seu formato final. Para que isso aconteça, é necessário seguir um template de diretórios e de arquivos em vários formatos. Por exemplo todos posts ficam no diretório <code>_posts</code>, e podem ser escritos em certos padrões de escrita como Markdown e, a partir daí são gerados seus respectivos <code>html\'s</code>. O projeto em Jekyll também pode ser hospedado gratuitamente pelo <a href="https://pages.github.com/">GitHub Pages</a>.</p>\n<p>Meu amigo Willian Justen fez uma série de posts explicando melhor o Jekyll e GitHub pages, são eles:</p>\n<ul>\n<li><a href="http://willianjusten.com.br/por-que-usar-jekyll/">Porque Usar Jekyll</a></li>\n<li><a href="http://willianjusten.com.br/perguntas-e-respostas-jekyll/">Perguntas e Respostas sobre Jekyll</a></li>\n<li><a href="http://willianjusten.com.br/dominio-proprio-no-github-pages/">Como ter um domínio próprio no Github Pages</a></li>\n</ul>\n<p>Qualquer dúvida posterior sugiro fortemente dar uma olhada na <a href="https://jekyllrb.com/docs/home/">documentação</a> da ferramenta.</p>\n<p>Se você não possui dificuldade com o inglês, sugiro que assista uma playlist de vídeos feita pelo canal DevTips chamada <a href="https://www.youtube.com/watch?v=T6jKLsxbFg4&amp;list=PLqGj3iMvMa4KQZUkRjfwMmTq_f1fbxerI">How to Build a Responsive Website From Start to Finish</a>.</p>\n<h2>Gulp</h2>\n<p><img src="/posts/tecnologias-que-usei-no-blog/gulp-fit.png" alt="imagem gulp"></p>\n<p>O Gulp, assim como Grunt, é um automatizador de tarefas, ou seja, ele é uma ferramenta que te permite abstrair de algumas coisas mais chatinhas durante o processo de criação. Segue abaixo uma analogia de como funcionaria.</p>\n<p>Suponhamos que ao entrar em sua sala, todos os dias, voçê antes de começar a trabalhar, tem que ligar a luz, abrir a sua janela, ligar o seu computador e abrir seu workflow.</p>\n<p>Com o Gulp é isso que acontece, porém ele automatiza as tarefas relacionadas ao processo de desenvolvimento, mas não menos importantes, tais como por exemplo:</p>\n<ul>\n<li>Dar refresh na página toda vez que uma alteração no código-fonte é salva</li>\n<li>Diminuir o tamanho dos arquivos de imagem a fim de otimizá-las o máximo possível</li>\n<li>Minificar e concatenar todo o Javascript, CSS e Html da página</li>\n<li>Criar Sprites de imagens e mapeá-las para um carregamento mais performático</li>\n</ul>\n<p>E entre muitas outras coisas. Se quiser saber mais sobre o gulp dê uma olhada no seu <a href="http://gulpjs.com/">site oficial</a> porque vale muito a pena.</p>\n<h2>Stylus</h2>\n<p><img src="/posts/tecnologias-que-usei-no-blog/stylus-thumb.png" alt="Logo Stylus"></p>\n<p>Minhas folhas de estilo são escritas em <a href="https://learnboost.github.io/stylus/">Stylus</a> e pré-processadas para o CSS via Gulp. Não vou me atentar a explicar muita coisa sobre isso, uma vez que tenhos planos específicos de fazer um post separado sobre essa linguagem. Sua sintaxe é muito amigável dê uma olhada no exemplo abaixo:</p>\n<pre><code class="language-styl"><span class="hljs-selector-tag">body</span>\n  <span class="hljs-attribute">background</span> red\n\n<span class="hljs-selector-class">.container</span>\n  <span class="hljs-attribute">width</span> <span class="hljs-number">90%</span>\n  <span class="hljs-attribute">margin</span> <span class="hljs-number">0</span> auto\n  <span class="hljs-selector-id">#logo</span>\n    <span class="hljs-attribute">width</span> <span class="hljs-number">200px</span>\n</code></pre>\n<h2>Conclusão</h2>\n<p>Antes de mais nada devo dizer que não fiz esse projeto com nenhum método catalogado e nem protocolado, sei que existem muitas outras maneiras diferentes de se criar esse tipo de ferramenta, se você tiver alguma outra maneira que julga ser melhor do que a minha, sinta-se a vontade para compartilhar nos comentários.</p>\n<p>Resolvi criar essa postagem para mostrar como foi feito esse trabalho, uma vez que fiquei muito feliz com os elogios que recebi, e quis fazer esse post até mesmo como uma forma de agradecimento e porque não, de incentivo a todos os que desejam escrever coisas também.</p>\n<p>Para os interessados TODO o <a href="https://github.com/lucasmaiaesilva/lucasmaiaesilva.github.io">código fonte do blog</a> está disponível no <a href="https://github.com/lucasmaiaesilva">meu github</a>, mas já aviso, se forem dar uma olhada não deixe de deixar um Star e deixe também seu comentário aqui. :)</p>\n</section>\n'},ZOLZ:function(s,a){s.exports='<section><h1>MongoDB - por que usar</h1>\n<h2>E vamos nós</h2>\n<p><img src="/posts/serie-mongo-db/giphy.gif" alt="Vamos nós"></p>\n<p>Primeiramente gostaria de agradecer a todos pelo feedback sobre o blog, muito obrigado, podem ter certeza que isso me motiva muito a continuar escrevendo, e dizer que estou iniciando uma série sobre MongoDB, este será o primeiro de alguns posts e dentro dessa série pretendo abordar uma base simples, porém sólida e organizada sobre o assunto.</p>\n<h2>Definição</h2>\n<p>Antes de explicar o porque do uso dessa tecnologia, seria legal entendermos melhor sua definição.</p>\n<p>O MongoDB é um banco de dados não relacional, quando digo que ele é &quot;não relacional&quot; significa que <strong>não</strong> relacionamos seus dados em tabelas.</p>\n<p>O MongoDB armazena seus documentos em disco no formato <a href="http://bsonspec.org">BSON</a> de serialização. BSON é a representação binária de documentos <a href="http://json.org">JSON</a>. Embora contenha mais tipos de dados que JSON propriamente dito.</p>\n<p>O mongo shell é responsável por fazer essa <em>tradução</em> entre os drivers de linguagem BSON e a linguagem específica da representação do documento.</p>\n<p>Vamos a sintaxe JSON (JavaScript Object Notation):</p>\n<pre><code class="language-js">{<span class="hljs-string">"chave"</span>: <span class="hljs-string">"valor"</span>}\n</code></pre>\n<p>Por exemplo:</p>\n<pre><code class="language-js">{<span class="hljs-string">"nome"</span>: <span class="hljs-string">"Lucas"</span>}\n</code></pre>\n<p>Mas é isso? Na verdade sim e não. Com base sempre nesta mesma estrutura com chave e valor podemos criar desde arquiteturas simples de dados (basic nesting), até as arquiteturas mais complexas de dados (deep nesting).</p>\n<p>Não vamos nos atrelar ao código por enquanto, pois não é o objetivo deste post, posteriormente veremos muitos exemplos de códigos no decorrer da série.</p>\n<h3>Schemaless</h3>\n<p>MongoDB é Schemaless, ou seja ele não possui Schema, mas como assim?</p>\n<p>Nos Bancos de dados relacionais, são necessários que todos os dados sigam basicamente a mesma estrutura, ou seja, por exemplo, todos os alunos da escola devem possui ID, notas e Endereços etc. Já em um banco de Dados não relacional isso já não é necessário. Na verdade alguns chamam isso de Dynamic Schema.</p>\n<p>Posso ter documentos com &quot;formatos&quot; variados de armazenamento.</p>\n<pre><code class="language-js">{ <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">7</span>},\n{ <span class="hljs-attr">a</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">10</span> }\n</code></pre>\n<h2>Por que usar MongoDB?</h2>\n<p>E agora que já vimos algumas features, e sabemos basicamente como funciona, vamos a justificativa:</p>\n<ul>\n<li>Banco de Dados em Documentos\n<ul>\n<li>Documentos (objetos), são mapeados de uma forma mais &quot;legível&quot; para o programador</li>\n<li>O Dynamic Schema torna o polimorfismo mais fácil</li>\n</ul>\n</li>\n<li>Alta Performance\n<ul>\n<li>Os documentos incorporados e os arrays diminuem a necessidade de JOIN\'s (o que se torna uma grande vantagem para leitura e escrita)</li>\n<li>Índices (indexes), podem ser incluídos nas chaves para incorporar documentos e arrays</li>\n</ul>\n</li>\n<li>Alta Disponibilidade\n<ul>\n<li>Servidores replicados com mecanismos de recuperação automática em caso de falha</li>\n</ul>\n</li>\n<li>Fácil Escalabilidade\n<ul>\n<li>Através do uso de <a href="http://docs.mongodb.org/manual/core/sharding/?_ga=1.169117673.99856725.1429377578">sharding</a>, são distribuídos automaticamente <em>collections</em> de dados através de máquinas</li>\n<li>As leituras de dados podem ser distribuidas por servidores replicados</li>\n</ul>\n</li>\n</ul>\n<h2>Conclusão</h2>\n<p>O MongoDB é um excelente banco de Dados, e que merece ser utilizado com mais frequência para grandes aplicações, mas como nenhuma tecnologia é bala de prata, devemos saber quando usá-lo e antes disso ele deve ser entendido. Pois o modo de pensar voltado para o lado <em>não relacional</em> é basicamente o contrário dos Bancos de dados tradicionais.</p>\n</section>\n'},d9EC:function(s,a,e){"use strict";var o=e("38oU"),n=e("q8qO"),t=e("VU/8"),r=t(o.a,n.a,!1,null,null,null);a.a=r.exports},hOxK:function(s,a){s.exports='<section><h1>MongoDB - arquitetura e funcionamento</h1>\n<p>Olá galera, atendendo a milhares de pedidos, surge então nosso segundo post da série sobre mongoDB, neste post vou explicar um pouco sobre mais sobre a sua essência, arquitetura e funcionamento. Vamos nessa.</p>\n<p><img src="/posts/serie-mongo-db/vamonessa.gif" alt="Vamo nessa"></p>\n<h2>Funcionamento</h2>\n<p><img src="/posts/serie-mongo-db/mongoDBschema.jpg" alt="funcionamento do mongoDB"></p>\n<p>Vamos dar uma olhada em seu funcionamento básico, primeiramente temos um <em>app</em>, esse app pode ser escrito em qualquer linguagem compatível com o mongoDB (nodejs, Python, Java, entre outras), porém além da linguagem esse app deve possuir o <em>driver</em> que funciona como uma espécie de plugin da aplicação que é o middleware entre o banco e a aplicação, ou seja, o que vai conectar a aplicação ao mongoDB.</p>\n<p>Na parte com a cor azul mais claro da imagem podemos ver a representação de alguns &quot;clientes&quot;, esses clientes fazem requests para sua aplicação, portanto esses intitulados &quot;clientes&quot; podem ser browsers, outras aplicações, etc, podem ser qualquer coisa que necessite daquele serviço naquele momento, eles podem estar consumindo a sua REST API por exemplo.</p>\n<p>Como mencionado, a aplicação conecta-se então ao mongoDB através do driver, e executa as operações requeridas tais como: recuperar dados, operações de CRUD, e o mongoDB retorna operações como por exemplo, o status daquela operação.</p>\n<p>Ao entrar em estado de &quot;hosting&quot; o mongod entra em cena, que nada mais é que o gerenciador de processos do MongoDB. Ele gerencia &quot;requests&quot; de dados, acesso e algumas outras operações de acesso que funcionam em background.</p>\n<p>É assim que esses componentes trabalham juntos, basicamente temos a aplicação no servidor interagindo diretamente com os clientes, e quando a aplicação precisa de alguma informação ou precisa guardar alguma informação ela  se comunica com o mongoDB que fica em um estado de <em>listening</em> para <em>requests</em> em andamento e ela responde apropriadamente quando esses <em>requests</em> estão completos.</p>\n<p>E por último, mas não menos importante nós temos o mongo shell, que é uma ferramenta muito útil para executarmos várias &quot;tarefas administrativas&quot; como por exemplo dar uma olhada prática no que existe no banco de dados, fazer leituras em <em>collections</em> etc.</p>\n<h2>Comparativo de functions e arquitetura com Mysql</h2>\n<p>Se você vem do mundo do banco de dados relacional, vai se sentir mais confortável com as nomeclaturas usadas no decorrer da série após das uma olhada nas analogias adotadas para fazer esse comparativo.</p>\n<p>Temos o seguinte comparativo de estrutura:</p>\n<p><img src="/posts/serie-mongo-db/structure.png" alt="Comparativo de estrutura"></p>\n<h3>Collections</h3>\n<p>As collections tem um conceito similar ao de tables no Mysql, a collection representa um conjunto de informações armazenadas em comum, essas informações são bem mais &quot;completas&quot;, uma vez que os bancos de dados não relacionais possuem uma junção de informações muito maior que os relacionais.</p>\n<p>Por exemplo um blog em um Schema de Mysql teriam as seguintes tabelas:</p>\n<ul>\n<li>Posts</li>\n<li>Categorias</li>\n<li>Posts_Categorias</li>\n<li>Autor</li>\n<li>Comentários</li>\n<li>Tags</li>\n<li>Posts_tags</li>\n</ul>\n<p>Enquanto isso o MongoDB poderia muito bem concentrar tudo isso em um único arquivo, uma vez que essas informações possuem conexões umas com as outras. Nesse caso ficariam todas em uma única collection de dados.</p>\n<h3>Documents</h3>\n<p>Cada elemento dentro da collection é considerado um <em>document</em>, e a soma de TODOS os documents dentro da mesma estrutura de dados formam a collection, segue um exemplo de um document, usando o mesmo exemplo de criação de um blog.</p>\n<pre><code class="language-js">{\n  <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'MongoDB arquitetura e funcionamento\'</span>,\n  <span class="hljs-string">\'body\'</span>: <span class="hljs-string">\'conteúdo do post\'</span>,\n  <span class="hljs-string">\'autor\'</span>: <span class="hljs-string">\'Lucas Maia e Silva\'</span>,\n  <span class="hljs-string">\'tags\'</span>: [<span class="hljs-string">\'banco de dados\'</span>, <span class="hljs-string">\'NoSQL\'</span>, <span class="hljs-string">\'DBA\'</span>],\n  <span class="hljs-string">\'comentarios\'</span>: [\n    {<span class="hljs-string">\'autor\'</span>: <span class="hljs-string">\'Diego\'</span>, <span class="hljs-string">\'body\'</span>: <span class="hljs-string">\'esse post tá muito foda\'</span>},\n    {<span class="hljs-string">\'autor\'</span>: <span class="hljs-string">\'Pedro\'</span>, <span class="hljs-string">\'body\'</span>: <span class="hljs-string">\'Lucas você é o melhor blogueiro do mundo! #SQN\'</span>}\n  ],\n  <span class="hljs-string">\'data\'</span>: <span class="hljs-string">\'26/10/2015\'</span>,\n  <span class="hljs-string">\'imgPost\'</span>: <span class="hljs-string">\'/assets/img/mongoDB.png\'</span>\n}\n</code></pre>\n<h3>Campos ou fields</h3>\n<p>Também conhecidos como chaves, é a representação nomeada no qual atribuímos algum valor a elas. Similar ao conceito de <em>column</em> no Mysql.</p>\n<h3>Embedded documents</h3>\n<p>Similar aos Joins do Mysql, são documentos que para serem &quot;acessados&quot; geralmente usamos as funções de pipeline do aggregate (será explicado no decorrer da série) para se obter algum tipo de retorno.</p>\n<p>Creio que o mais complicado no MongoDB seria mesmo o &quot;modo de pensar&quot; e estruturar seus documentos, uma vez que são quase nulas o número de dependências entre diferentes estruturas de informações.</p>\n<p>Se você está iniciando nesse mundo novo de noSql existe uma série muito boa de posts do <a href="https://twitter.com/osuissa">Suissa</a>, que aborda esse tema MongoDb - Como mudar seu jeito relacional de pensar <a href="http://nomadev.com.br/mongodb-como-mudar-seu-jeito-relacional-de-pensar/">parte 1</a> e <a href="http://nomadev.com.br/mongodb-como-mudar-seu-jeito-relacional-de-pensar-parte-2/">parte 2</a>.</p>\n<h2>Conclusão</h2>\n<p>Este post foi criado com o intuito de explicar melhor, o funcionamento de algumas features do mongoDB, pois os próximos post da série serão mais técnicos (com mais código), e sem uma visão do processo como um todo (mesmo que superficial), seria mais difícil o bom entendimento dos próximos itens da série. Enfim, volto em breve com mais uma sequência. Deixe seu comentário sobre esse post, como eu expliquei muitas teorias pode ser que eu tenha me perdido e falado alguma besteira também, e, se isso aconteceu, não deixe de me informar estou aqui pra isso. :)</p>\n</section>\n'},hhhU:function(s,a,e){a=s.exports=e("FZ+f")(!1),a.push([s.i,".post{font-family:Nunito,Helvetica Neue,Helvetica,Arial,sans-serif;font-weight:400;line-height:1.62;color:#444;-webkit-font-smoothing:antialiased;background:#fff;border-radius:4px;-webkit-box-shadow:0 1px 2px rgba(0,0,0,.07);box-shadow:0 1px 2px rgba(0,0,0,.07);margin-bottom:80px;margin-bottom:5rem}.post-content{margin:16px 0;margin:1rem 0;padding:16px;padding:1rem}.post-content h1{margin:32px 0;margin:2rem 0;line-height:32px;line-height:2rem;font-size:25.6px;font-size:1.6rem}.post-content pre{display:block;overflow-x:auto;color:#abb2bf;background:#282c34;width:100%;padding:32px 64px;padding:2rem 4rem}.post-content p>code{color:#c7254e;background-color:#f9f2f4;border-radius:4px;padding:2px 4px;font-size:90%}.post-content img{width:100%}.post-content pre{margin:48px 0;margin:3rem 0}.post p{margin-bottom:48px;margin-bottom:3rem;font-size:18.4px;font-size:1.15rem}.post-content a{text-decoration:underline}.post-content blockquote{background:#f5f5f5;padding:16px;padding:1rem;margin-bottom:16px;margin-bottom:1rem;border:1px solid #ccc}.post-content blockquote p{margin-bottom:.48px;margin-bottom:.03rem}@media screen and (min-width:734px){.post-content pre{margin:3rem 0}.post-content,.post-content pre{padding:2rem}.post-content h1{font-size:2rem}.post-content img{width:auto;max-width:100%}}@media screen and (min-width:1024px){,.post-content,.post-content pre{padding:2rem 4rem}.post-content pre{margin:3rem 0}}",""])},jmS0:function(s,a,e){"use strict";function o(s){e("Bo5/")}Object.defineProperty(a,"__esModule",{value:!0});var n=e("xPCo"),t=e("KxFy"),r=e("VU/8"),i=o,p=r(n.a,t.a,!1,i,null,null);a.default=p.exports},mLT5:function(s,a){s.exports={posts:[{title:"Repensando Layouts com Flexbox",slug:"repensando-layouts-com-flexbox",image:{url:"front.png",alt:"Repensando Layouts com Flexbox"},date:"11/01/2016"},{title:"MongoDB operações de CRUD",slug:"mongodb-operações-de-crud",image:{url:"mongodb.png",alt:"Post sobre operações de CRUD com mongodb"},date:"27/11/2015"},{title:"Criando um modal simples com HTML e CSS",slug:"criando-modal-simples-com-html-e-css",image:{url:"markdown.png",alt:"Post sobre Como usar corretamente o Mongo Shell"},date:"25/11/2015"},{title:"Usando o Mongo Shell",slug:"usando-o-mongo-shell",image:{url:"mongodb.png",alt:"Post sobre Como usar corretamente o Mongo Shell"},date:"23/11/2015"},{title:"Criando paleta de cores semânticas no Illustrator",slug:"criando-paleta-de-cores-no-illustrator",image:{url:"illustrator.png",alt:"Post sobre Como criar uma paleta de cores semântica no Illustrator"},date:"11/11/2015"},{title:"MongoDB, Introdução ao JSON",slug:"mongodb-introdução-ao-json",image:{url:"mongodb.png",alt:"Post sobre MongoDB. introdução ao JSON"},date:"09/11/2015"},{title:"Grids Semânticos com Jeet",slug:"grids-semânticos-com-jeet",image:{url:"jeet.jpg",alt:"Post sobre Grids Semânticos com Jeet"},date:"03/11/2015"},{title:"Como sincronizar um Fork Feito pelo Github",slug:"como-sincronizar-o-fork-feito-pelo-github",image:{url:"github.jpg",alt:"Post sobre Como sincronizar um fork feito pelo Github"},date:"28/10/2015"},{title:"MongoDB arquitetura e funcionamento",slug:"mongodb-arquitetura-e-funcionamento",image:{url:"mongodb.png",alt:"Post sobre MongoDB arquitetura e funcionamento"},date:"26/10/2015"},{title:"Motivos para você aprender a falar inglês",slug:"motivos-para-você-aprender-a-falar-inglês",image:{url:"english.jpg",alt:"Post sobre motivos para você aprender a falar inglês"},date:"23/10/2015"},{title:"MongoDB por que usar",slug:"mongodb-por-que-usar",image:{url:"mongodb.png",alt:"post mongoDB por que usar"},date:"19/10/2015"},{title:"Usando Markdown",slug:"usando-markdown",image:{url:"markdown.png",alt:"post sobre markdown"},date:"12/10/2015"}]}},npZB:function(s,a){s.exports='<section><h1>Repensando Layouts com Flexbox</h1>\n<h2>Introdução</h2>\n<p>Fala galera, devo pedir desculpas pois fiquei algum (muito) tempo sem postar nada, mas gostaria de me redimir criando um post, sobre um pequeno projeto que fiz há pouco tempo.</p>\n<p>Gostaria de agradecer a todos os feedbacks que recebi por esses dias, e dois deles em específico, que foram o de <a href="https://twitter.com/@Willian_justen">@Willian_justen</a> que me referenciou em sua postagem de virada de ano, e minha prima <strong>Livia Siqueira</strong>, que, apesar de muito nova, me disse que lê o blog e disse que se interessa pela área e quando crescer irá se tornar uma excelente programadora tenho certeza. Esse tipo de coisa me motiva muito obrigado a todos.</p>\n<h2>FlexBox</h2>\n<p>FlexBox o que é isso afinal?</p>\n<h3>Definição</h3>\n<p>Bom vamos ao assunto.</p>\n<blockquote>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices.</p>\n</blockquote>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes">Definição MDN</a>.</p>\n<p>Traduzindo, O CSS3 Flexible Box ou flexbox, é um modo de layout feito para alinhar os elementos dentro da página de maneira que esses elementos se comportem de maneira &quot;previsível&quot; quando o layout da página precisa acomodar diferentes tamanhos de tela para diferentes dispositívos.</p>\n<p>Basicamente FlexBox é uma forma de organizar elementos na tela, setando comportamentos por grupos de maneira mais simples possível, evitando certos tipos de &quot;gambiarras&quot; de CSS como padding e margin (disse evitando não removendo completamente, pois ainda existem situações em que esses atributos são úteis).</p>\n<blockquote>\n<p>A ideia é simples: os filhos de um elemento com flexbox pode se posicionar em qualquer direção e pode ter dimensões flexíveis para se adaptar. Você pode posicionar os diversos elementos independente da sua posição na estrutura do HTML, o que é muito bom. Um dos problemas do float a sua dependência com os elementos na estrutura do HTML. Estes elementos precisam estar em uma ordem específica, se não o layout não dá certo. Com o Flexbox essa ordem não importa, isso quer dizer que você pode organizar a informação do seu HTML de beneficiando o SEO e Acessibilidade. O código da estruturação destes elementos fica mais simples e fácil de manter.</p>\n</blockquote>\n<p>Disse Diego Eis em seu artigo no tableless <a href="http://tableless.com.br/flexbox-organizando-seu-layout/">Flexbox - organizando seu Layout</a></p>\n<p>Como disse o filósofo Wade Wilson, &quot;parece promessa feita por propaganda de Yogurte&quot;. Mas vejamos como é simples sua abordagem e utilização.</p>\n<h3>Layout</h3>\n<p>Esse projeto de Layout foi feito para a criação de um Layout de um projeto de chat simples com React e Firebase (prometo escrever um post sobre esse projeto abordando ambas tecnologias), vamos a ele.</p>\n<p>Primeiramente escrevemos o bom e velho HTML de maneira simples.</p>\n<pre><code class="language-html">index.html\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"barra-lateral"</span>&gt;</span>\n      sidebar\n    <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"conteudo"</span>&gt;</span>\n      conteúdo\n    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<p><img src="/posts/flexbox/display-block.png" alt="Display Block"></p>\n<p>Bem como sabemos tanto o <code>aside</code> quanto o <code>section</code> assim como as <code>divs</code> são elementos de <strong>bloco</strong>, ou seja, são renderizados em linha ocupando sempre toda a linha do navegador por padrão. Mas nesse caso queremos colocar um do lado do outro correto? Então como fazemos isso?</p>\n<p>Normalmente usaríamos uma série de <code>floats</code> e <code>margins</code> para conseguirmos o resultado desejado. Porém o flexbox veio para nos ajudar a simplificar as coisas. Veja como fica o nosso CSS.</p>\n<pre><code class="language-css"><span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">display</span>: flex;\n}\n</code></pre>\n<p>Fazendo isso os elementos se tornam &quot;flexíveis&quot;, e, por padrão sua direção é em linha por causa do atributo <code>flex-direction</code> do flexbox.</p>\n<blockquote>\n<p>O atributo <code>body</code> é o elemento pai, portanto serão inclusos com essas características, somente os filhos dele, que no nosso caso, são <code>aside</code> e <code>section</code></p>\n</blockquote>\n<p><img src="/posts/flexbox/display-flex.png" alt="Display Flex"></p>\n<p>Em seguida vamos setar algumas características dos elementos <code>aside</code> e <code>section</code></p>\n<pre><code class="language-css"><span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">display</span>: flex;\n}\n\n<span class="hljs-selector-tag">aside</span><span class="hljs-selector-class">.barra-lateral</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>;\n  <span class="hljs-attribute">background</span>: peachPuff;\n}\n\n<span class="hljs-selector-tag">section</span><span class="hljs-selector-class">.conteudo</span> {\n  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">background</span>: gray;\n}\n</code></pre>\n<p><img src="/posts/flexbox/display-column.png" alt="Display Column"></p>\n<p>Atente-se ao atributo <code>flex-grow</code> na classe conteudo, você viu que anteriormente a ele definimos um tamanho ao <code>aside</code> através do atributo <code>width</code>, então ao invés de definirmos um tamanho físico ou líquido a ele, simplesmente usamos essa propriedade que permite que o elemento &quot;cresça&quot; atingindo o restante do espaço disponível.</p>\n<p>E por último para finalizar o protótipo base, adicionamos ao <code>body</code> que é nosso &quot;elemento pai&quot; uma linha de código que dirá que o tamanho vertical do nosso projeto será o tamanho da janela do navegador.</p>\n<pre><code class="language-css"><span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;\n}\n\n<span class="hljs-selector-tag">aside</span><span class="hljs-selector-class">.barra-lateral</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>;\n  <span class="hljs-attribute">background</span>: peachPuff;\n}\n\n<span class="hljs-selector-tag">section</span><span class="hljs-selector-class">.conteudo</span> {\n  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">background</span>: gray;\n}\n</code></pre>\n<p><img src="/posts/flexbox/flex-grow.png" alt="Usando Flex grow"></p>\n<p>O valor <code>100vh</code> significa que ela irá ocupar os 100% da <code>viewport</code>, ou seja, 100% do tamanho da janela.</p>\n<p>Agora vamos alterar novamente a estrutura do nosso html, dentro dele vamos adicionar 2 elementos filhos ao atributo com a classe <code>conteudo</code>.</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"barra-lateral"</span>&gt;</span>\n    sidebar\n  <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"conteudo"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"display"</span>&gt;</span>\n      display\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"insert"</span>&gt;</span>\n      insert\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n</code></pre>\n<p>Agora que começa a lógica do flexbox. Assim como o <code>body</code> que é nosso elemento pai, podemos estilizar o <code>section</code> conteudo como <code>display: flex</code> também e isso nos dá possibilidade de usarmos todos os atributos do flex-box para estilizá-lo.</p>\n<p>No nosso caso o elemento display usaremos para mostrar as mensagens dos usuários, e o elemento insert usaremos para criar o <code>input</code> para digitarmos o texto.</p>\n<p><img src="/posts/flexbox/content-column.png" alt="Display flex grow e input"></p>\n<p>Como já falado por padrão do flexbox os elementos <code>display</code> e <code>insert</code> serão renderizados um do lado do outro. Para mudar isso basta acrescentar no CSS do elemento pai o atributo <code>flex-direction: column</code> assim mudamos a direção da renderizaçao.</p>\n<p>A partir de agora fica muito interessante, assim como fizemos o conteúdo &quot;crescer&quot; com o flex-grow no sentido horizontal, também podemos fazê-lo no sentido vertical, assim dando uma cara nova a nossa interface do chat.</p>\n<pre><code class="language-css"><span class="hljs-selector-tag">section</span><span class="hljs-selector-class">.conteudo</span> {\n  <span class="hljs-attribute">background</span>: gray;\n  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">flex-direction</span>: column;\n  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;\n}\n\n<span class="hljs-selector-class">.display</span> {\n  <span class="hljs-attribute">background</span>: white;\n  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;\n}\n\t\n<span class="hljs-selector-class">.insert</span> {\n  <span class="hljs-attribute">background</span>: black;\n  <span class="hljs-attribute">color</span>: white;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;\n}\n\n</code></pre>\n<p>Fazendo isso temos esse resultado:</p>\n<p><img src="/posts/flexbox/flex-grow-display.png" alt="Display flex grow e input"></p>\n<h3>Alinhamento</h3>\n<p>Vamos então agora alinhar os nossos elementos.</p>\n<p>Suponhamos que tenhamos que alinhar todo o conteúdo dentro da sidebar ao centro da div, tanto na vertical como na horizontal, para fazer isso com flexbox é muito simples, basta acrescentar as seguintes comandos ao <strong>elemento pai</strong> dessa div.</p>\n<pre><code class="language-css"><span class="hljs-selector-class">.barra-lateral</span> {\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">/* alinha os itens na horizontal */</span>\n  <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* alinha os itens na vertical */</span>\n}\n</code></pre>\n<p>Pronto, agora é só estilizar com nosso bom e velho css comum. Como já disse esse projeto também possui reactJS e firebase como suas tecnologias base, porém a arquitetura de seu layout foi feito exatamente como mencionado neste post. Qualquer dúvida / elogio, deixe nos comentários. :)</p>\n<p>Arte final</p>\n<p><img src="/posts/flexbox/final-art.png" alt="Arte Final"></p>\n<div class="center">\n\t<a href="http://lucasmaiaesilva.com.br/firebase-chat/" class="button button-3d button-caution button-rounded" target="blank">Ver o projeto</a>\n\t<a href="http://github.com/lucasmaiaesilva/firebase-chat/" class="button button-3d button-primary button-rounded" target="blank">Ver o código no Github</a>\t\n</div>\n</section>\n'},q8qO:function(s,a,e){"use strict";var o=function(){var s=this,a=s.$createElement;return(s._self._c||a)("div",{attrs:{id:"disqus_thread"}})},n=[],t={render:o,staticRenderFns:n};a.a=t},"r/ZZ":function(s,a,e){function o(s){return e(n(s))}function n(s){var a=t[s];if(!(a+1))throw new Error("Cannot find module '"+s+"'.");return a}var t={"./como-sincronizar-o-fork-feito-pelo-github.md":"PmdM","./criando-modal-simples-com-html-e-css.md":"WyIT","./criando-paleta-de-cores-no-illustrator.md":"N5i6","./grids-semânticos-com-jeet.md":"xraU","./mongodb-arquitetura-e-funcionamento.md":"hOxK","./mongodb-introdução-ao-json.md":"wvYz","./mongodb-operações-de-crud.md":"tyf9","./mongodb-por-que-usar.md":"ZOLZ","./motivos-para-você-aprender-a-falar-inglês.md":"DIWL","./repensando-layouts-com-flexbox.md":"npZB","./tecnologias-que-usei-para-criar-esse-blog.md":"YcK/","./usando-markdown.md":"B3Eq","./usando-o-mongo-shell.md":"OIlh"};o.keys=function(){return Object.keys(t)},o.resolve=n,s.exports=o,o.id="r/ZZ"},tyf9:function(s,a){s.exports='<section><h1>MongoDB - operações de CRUD</h1>\n<h2>Introdução</h2>\n<p>No post anterior vimos o que é, e como funciona o Mongo Shell, isso é importante pois é por ele que iremos trabalhar as queries do banco. Após vermos também como trabalhar com as <em>collections</em> e seus respectivos nomes, podemos usar as queries específicas de CRUD nas <em>collections</em>.</p>\n<p>Pra quem vêm do mundo do SQL o seguinte comparativo de funções, pode ajudar a ter uma melhor ideia dessas operações:</p>\n<p><img src="/posts/serie-mongo-db/functions.png" alt="Comparativo de funcionalidades"></p>\n<p>Este post será sobre as operações de CRUD em MongoDB, se você deseja ver a série desde o início clique <a href="http://lucasmaiaesilva.com.br/series">aqui</a>.</p>\n<p>O CRUD é um acrônimo para Create, Read, Update e Delete. São as 4 operações principais em um banco de dados. No MongoDB essas funcionalidades são:</p>\n<ul>\n<li>Create - insert()</li>\n<li>Read - find()</li>\n<li>Update - update()</li>\n<li>Delete - remove()</li>\n</ul>\n<p>Vamos aos comandos.</p>\n<h3>Insert</h3>\n<p>O comando insert como o próprio nome já diz insere um <em>document</em> na collection referenciada.</p>\n<pre><code class="language-sh">db.alunos.insert({\n  nome: <span class="hljs-string">"Lucas Maia e Silva"</span>,\n  dataNascimento: <span class="hljs-string">"01/01/1990"</span>,\n  notas: {\n    <span class="hljs-string">"matematica"</span>: 100,\n    <span class="hljs-string">"fisica"</span>: 100,\n    <span class="hljs-string">"portugues"</span>: 0,\n    <span class="hljs-string">"geografia"</span>: 0,\n  },\n  peso: 75,\n  altura: 1.8,\n  sexo: <span class="hljs-string">"M"</span>,\n  pais: <span class="hljs-string">"Brasil"</span>,\n  estado: <span class="hljs-string">"MG"</span>\n})\n</code></pre>\n<p>Como você pode perceber, a inserção se dá pelo método com a sintaxe <code>db.alunos.insert()</code>, onde o <code>db</code> é o banco de dados em que estamos no momento setado pelo <code>use</code>, o <code>alunos</code> é o nome da <em>collection</em> em seguida <code>insert</code> que nada mais é do que o nome do método que por sinal recebe um objeto JSON como parâmetro contendo os dados a serem inseridos no banco. Essa forma singular de dados é o que chamamos de <em>document</em>.</p>\n<blockquote>\n<p>Da mesma maneira que o <code>use</code>, quando passamos dentro do método de inserção o nome da collection, se ele não existir ela será criada pelo Mongo Shell.</p>\n</blockquote>\n<h3>Find</h3>\n<p>Agora que já temos um documento inserido podemos usar o comando <code>find</code> para encontrá-lo.</p>\n<pre><code class="language-sh">$ db.alunos.<span class="hljs-function"><span class="hljs-title">find</span></span>()\n{ <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"564fb56c6d600fca5032d20f"</span>), <span class="hljs-string">"nome"</span> : <span class="hljs-string">"Lucas Maia e Silva"</span>, <span class="hljs-string">"dataNascimento"</span> : <span class="hljs-string">"01/01/1990"</span>, <span class="hljs-string">"notas"</span> : { <span class="hljs-string">"matematica"</span> : 100, <span class="hljs-string">"fisica"</span> : 100, <span class="hljs-string">"portugues"</span> : 0, <span class="hljs-string">"geografia"</span> : 0 }, <span class="hljs-string">"peso"</span> : 75, <span class="hljs-string">"altura"</span> : 1.8 }\n</code></pre>\n<p>Para indentá-lo facilitando uma melhor leitura podemos usar o método pretty.</p>\n<pre><code class="language-sh">$ db.alunos.find().<span class="hljs-function"><span class="hljs-title">pretty</span></span>()\n{\n  <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"564fb56c6d600fca5032d20f"</span>),\n  <span class="hljs-string">"nome"</span> : <span class="hljs-string">"Lucas Maia e Silva"</span>,\n  <span class="hljs-string">"dataNascimento"</span> : <span class="hljs-string">"01/01/1990"</span>,\n  <span class="hljs-string">"notas"</span> : {\n    <span class="hljs-string">"matematica"</span> : 100,\n    <span class="hljs-string">"fisica"</span> : 100,\n    <span class="hljs-string">"portugues"</span> : 0,\n    <span class="hljs-string">"geografia"</span> : 0\n  },\n  <span class="hljs-string">"peso"</span> : 75,\n  <span class="hljs-string">"altura"</span> : 1.8,\n  <span class="hljs-string">"sexo"</span> : <span class="hljs-string">"M"</span>,\n  pais: <span class="hljs-string">"Brasil"</span>,\n  estado: <span class="hljs-string">"MG"</span>\n}\n</code></pre>\n<p>Uma outra coisa interessante de se falar é o campo <code>_id</code>, esse é o identificador de nosso documento, quando não o passamos por parâmetro no <code>find</code>, o próprio Mongo o cria.</p>\n<p>Existe também o método <code>findOne</code> que retorna somente 1 documento, aquele com a característica mais próxima a busca referenciada. Sua sintaxe é a mesma do método <code>find</code>.</p>\n<p>Vamos focar no método <code>find</code> que é aquele onde a busca irá retornar mais de 1 elemento em comum nos <code>documents</code>.</p>\n<p>Como no post do Jeet, não quero que isso vire uma tradução da documentação, mas não posso deixar de citar alguns exemplos, veja-os:</p>\n<pre><code class="language-sh">$ db.alunos.find({sexo: <span class="hljs-string">"F"</span>, estado:<span class="hljs-string">"MG"</span>})\n<span class="hljs-comment"># retorna todas as alunas que moram no Estado de MG</span>\n</code></pre>\n<h4>Projection</h4>\n<p>O <em>projection</em> é um objeto que passamos como parâmetro do find, com o intuito de obter somente do <em>document</em> os campos que precisamos, isso é muito útil quando temos documentos com inúmeros campos e precisamos tratar somente alguns dados, isso é ótimo para a performance.</p>\n<pre><code class="language-sh">$ db.usuarios.find({_id:3}, { _id:0, usuario:1, senha:1 })\n<span class="hljs-comment"># retorna somente os campos usuário e senha</span>\n</code></pre>\n<p>O projection retorna somente os campos em que setamos como <code>1 ou true</code>, não é preciso colocar todos os campos do <em>document</em> no objeto como true ou false, se você não irá precisar do campo <code>_id</code> então você deve setá-lo como <code>0 ou false</code>, pois por padrão ele é tido como <code>true</code>, é importante a remoção do campo <code>_id</code> quando não for usá-lo até mesmo por uma questão de segurança.</p>\n<h4>gt e lt</h4>\n<p>Existem alguns tipos de chaves que usamos como uma espécie de filtos para o <code>find</code>, como por exemplo:</p>\n<ul>\n<li><code>gt</code> (greater than) maior que</li>\n<li><code>gte</code> (greater than or equals) maior ou igual a</li>\n<li><code>lt</code> (less than) menor que</li>\n<li><code>lte</code> (less than or equals) menor ou igual a</li>\n</ul>\n<pre><code class="language-sh">$ db.alunos.find({  notas.matematica: {<span class="hljs-variable">$gte</span>: 70}  })\n<span class="hljs-comment"># retorna todos os alunos que possuiram notas iguais ou superiores a 70 em matemática</span>\n</code></pre>\n<h4>regex</h4>\n<p>Você também pode usar expressões regulares nos comandos do Mongo Shell.</p>\n<pre><code class="language-sh">$ db.alunos.find({  nome: {<span class="hljs-variable">$regex</span>: <span class="hljs-string">"e"</span>}  })\n<span class="hljs-comment"># retorna todos os alunos que possuem a letra "e" em algum lugar do nome</span>\n\n$ db.alunos.find({  nome: {<span class="hljs-variable">$regex</span>: <span class="hljs-string">"^A"</span>}  })\n<span class="hljs-comment"># retorna todos os alunos que começam com a letra "A" maiúsculo</span>\n\n$ db.alunos.find({  nome: {<span class="hljs-variable">$regex</span>: <span class="hljs-string">"e$"</span>}  })\n<span class="hljs-comment"># retorna todos os alunos que termina com a letra "e"</span>\n</code></pre>\n<h4>operadores lógicos e / ou</h4>\n<p>Os operadores lógicos são representados pela sintaxe <code>$and</code> / <code>$or</code> e requerem um <em>array</em>, dentro desse <em>array</em> são passadas todas as condições para serem analisadas. O operador <code>$and</code> retorna o documento buscado, somente se <strong>todas</strong> as queries passadas forem verdadeiras. E o operador <code>$or</code> retorna o documento se pelo menos <strong>uma</strong> query for verdadeira.</p>\n<p>Ex: <code>db.pessoas.find({ $or: [ {condição 1, condição 2} ] })</code>.</p>\n<pre><code class="language-sh">$ db.alunos.find({  <span class="hljs-variable">$or</span>:[ { nome: {<span class="hljs-variable">$gt</span>: <span class="hljs-string">"D"</span>}, email: {<span class="hljs-variable">$exists</span>: <span class="hljs-literal">true</span>} } ]  })\n<span class="hljs-comment"># retorna todos os alunos que o nome começa a partir da letra D do alfabeto </span>\n<span class="hljs-comment"># ou</span>\n<span class="hljs-comment"># os alunos em que tiverem o campo de email em seu document</span>\n</code></pre>\n<h4>operadores all / in</h4>\n<p>Esses operadores existem para trabalharmos com <em>arrays</em>.</p>\n<p>O operador <code>$all</code> retorna o documento se <strong>todos</strong> os itens procurados estiverem contidos na query. E o operador <code>$in</code> varre o array mostrando os documents que contenham <strong>algum</strong> dos itens especificados.</p>\n<pre><code class="language-sh">$ db.comidas.find({  favoritas: {<span class="hljs-variable">$all</span>: [<span class="hljs-string">\'hot dog\'</span>, <span class="hljs-string">\'cerveja\'</span>]}  })\n<span class="hljs-comment"># retorna os documents que possuem hot dog e cerveja dentro do array de favoritas</span>\n\n$ db.comidas.find({  favoritas: {<span class="hljs-variable">$in</span>: [<span class="hljs-string">\'churrasco\'</span>, <span class="hljs-string">\'Hamburguer\'</span>]}  })\n<span class="hljs-comment"># retorna os documents que possuem pelo menos um dos itens no array passado</span>\n</code></pre>\n<h3>Update</h3>\n<p>Existem algumas maneiras de fazer Update diretamente no <em>document</em>, uma delas é o comando <code>update</code> sem nenhuma outra feature, que atualiza o <em>document</em> para exatamente o objeto passado por parâmetro.</p>\n<pre><code class="language-sh">db.pessoas.update({nome: <span class="hljs-string">\'Lucas\'</span>},{nome: <span class="hljs-string">\'Lucas Maia\'</span>, english: <span class="hljs-literal">true</span>})\n</code></pre>\n<p>Como você pode ver a função <code>update</code> recebe dois objetos como parâmetro, o primeiro é a query para busca, e o segundo objeto é o <em>replace</em>, ou seja, são os dados que substituirão aquele <em>document</em>.</p>\n<blockquote>\n<p>obs: Quando se usa o update da maneira acima, os elementos anteriores da tabela são descartados com excessão do _id</p>\n</blockquote>\n<h4>set</h4>\n<p>O operador <code>set</code> é usado quando queremos evitar que a substituição inteira do <em>document</em> aconteça, ou seja, quando queremos acrescentar e / ou alterar somente alguns campos no <em>document</em>, sem apagar todos os outros.</p>\n<pre><code class="language-sh">db.pessoas.update({  nome: <span class="hljs-string">\'Lucas\'</span>  },{<span class="hljs-variable">$set</span>: {idade:25}  })\n</code></pre>\n<h4>upsert</h4>\n<p>Cria um novo <em>document</em>, caso não exista nenhum com as características passadas.</p>\n<pre><code class="language-sh">db.pessoas.update({nome: <span class="hljs-string">"George"</span>}, {<span class="hljs-variable">$set</span>: {idade: 40} }, {upsert: <span class="hljs-literal">true</span>})\n</code></pre>\n<h4>inc</h4>\n<p>Incrementa os valores ao elemento.</p>\n<pre><code class="language-sh">db.pessoas.update({  nome: <span class="hljs-string">\'Lucas\'</span>  },{<span class="hljs-variable">$inc</span>: {idade:1}  })\n<span class="hljs-comment"># idade agora é 26</span>\n</code></pre>\n<h4>unset</h4>\n<p>Remove os campos especificados nele.</p>\n<pre><code class="language-sh">db.pessoas.update({  nome: <span class="hljs-string">\'seu madruga\'</span>  },{<span class="hljs-variable">$unset</span>: {profissao:1}  })\n<span class="hljs-comment"># remove o campo profissão do document onde o nome é seu madruga</span>\n</code></pre>\n<h3>Update em Arrays</h3>\n<p>Existem as seguintes maneiras de fazermos updates em um array, são elas:</p>\n<h4>push</h4>\n<p>O comando push acrescenta o item ao final do array.</p>\n<pre><code class="language-sh">db.pessoas.update({  nome: <span class="hljs-string">\'Lucas\'</span>  },{<span class="hljs-variable">$push</span>: {comidasPreferidas: <span class="hljs-string">\'pizza\'</span>}  })\n</code></pre>\n<h4>pop</h4>\n<p>Remove itens por índice (posição) do array.</p>\n<pre><code class="language-sh">db.pessoas.update({  _id: 2  },{<span class="hljs-variable">$pop</span>: {comidasPreferidas: 1}  })\n<span class="hljs-comment"># remove o último item do array comidasPreferidas</span>\ndb.pessoas.update({  _id: 2  },{<span class="hljs-variable">$pop</span>: {compromissos: -1}  })\n<span class="hljs-comment"># remove o primeiro item do array compromissos</span>\n</code></pre>\n<h4>pushAll</h4>\n<p>Acrescenta mais de um elemento ao array.</p>\n<pre><code class="language-sh">db.escritores.update({  nome: <span class="hljs-string">\'Paulo Coelho\'</span>  },{<span class="hljs-variable">$pushAll</span>: { livros_ids: [2, 5, 19, 203, 305] }  })\n</code></pre>\n<h4>pull</h4>\n<p>Remove item por valor.</p>\n<pre><code class="language-sh">db.escritores.update({  nome: <span class="hljs-string">\'Paulo Coelho\'</span>  },{<span class="hljs-variable">$pull</span>: { livros_ids: 2 }  })\n<span class="hljs-comment"># remove o livro de id 2 do array</span>\n</code></pre>\n<h4>pullAll</h4>\n<p>Remove mais de um item no array, possui a mesma sintaxe do pushAll.</p>\n<pre><code class="language-sh">db.escritores.update({  nome: <span class="hljs-string">\'Paulo Coelho\'</span>  },{<span class="hljs-variable">$pullAll</span>: { livros_ids: [2, 5, 19] }  })\n</code></pre>\n<h4>addToSet</h4>\n<p>Acrescenta o elemento ao array somente se ele não existir.</p>\n<pre><code class="language-sh">db.arrays.update({  id: 0  },{<span class="hljs-variable">$addToSet</span>: { a: 5 } })\n</code></pre>\n<h3>Multi update</h3>\n<p>Quando precisamos fazer o update em <strong>mais de um elemento</strong>, precisamos setar o multi update.</p>\n<pre><code class="language-sh">db.medicos.update({}, {<span class="hljs-variable">$set</span>: {titulo: <span class="hljs-string">"Dr"</span><span>}}</span>, {multi: <span class="hljs-literal">true</span>})\n</code></pre>\n<h3>Remove</h3>\n<p>O <code>remove</code> possui a mesma sintaxe do comando <code>find</code>.</p>\n<pre><code class="language-sh">db.jogadores.remove({ nome: <span class="hljs-string">\'Fred\'</span> })\n</code></pre>\n<blockquote>\n<p>obs: Em algumas versões do MongoDB se for passado o objeto vazio como parâmetro, a collection inteira é removida</p>\n</blockquote>\n<p>Uma outra maneira de remover a collection inteira é com o comando <code>drop</code>.</p>\n<pre><code class="language-sh">db.jogadores.drop()\n</code></pre>\n<h2>Conclusão</h2>\n<p>Posso dizer que esse é o principal post da série pois guarda os principais conceitos sobre o funcionamento do MongoDB. O criei com intuito de que seja não somente um post explicativo, mas como um post de referência também, no qual você pode pesquisar e dar uma olhada assim que precisar. Dúvidas e / ou sugestões é só deixar aqui embaixo :)</p>\n</section>\n'},vagE:function(s,a,e){"use strict";function o(s){e("RE5A")}var n=e("/eDf"),t=e("F8v8"),r=e("VU/8"),i=o,p=r(n.a,t.a,!1,i,null,null);a.a=p.exports},wvYz:function(s,a){s.exports='<section><h1>MongoDB - Introdução ao JSON</h1>\n<p>Fala galera mais esforçada do Brasil.</p>\n<p>Continuando com a série sobre MongoDB vamos dar uma aprofundada na Série, deixar um pouco  somente os conceitos de lado e começar a ver mais exemplos práticos da coisa.</p>\n<h2>JSON</h2>\n<p>Como já vimos anteriormente, o formato de dados utilizado pelo Mongo é o <a href="http://bsonspec.org/">BSON</a>, mas esse formato é gerenciado pelo próprio Mongo, o formato de dados que usamos para trabalhar com ele é o formato JSON que funciona como uma espécie de \'client side\' do BSON.</p>\n<p>JSON é um acrônimo para Javascript Object Notation, quando nos referimos a um objeto, nos referimos a um tipo de estrutura de dados da linguagem, basicamente um objeto pode conter atributos e métodos. A sintaxe de um objeto em javascript segue a notação de <code>{chave: valor}</code>.</p>\n<pre><code class="language-js"><span class="hljs-keyword">var</span> pessoa = {\n  <span class="hljs-attr">nome</span>: <span class="hljs-string">\'Lucas\'</span>,\n  <span class="hljs-attr">sobrenome</span>: <span class="hljs-string">\'Maia\'</span>,\n  <span class="hljs-attr">idade</span>: <span class="hljs-number">25</span>,\n  <span class="hljs-attr">peso</span>: <span class="hljs-number">78</span>,\n  <span class="hljs-attr">altura</span>: <span class="hljs-number">1.78</span>,\n  <span class="hljs-attr">nomeCompleto</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-keyword">return</span> nome + <span class="hljs-string">\' \'</span> + sobrenome;\n  },\n  <span class="hljs-attr">comidasPreferidas</span>: [<span class="hljs-string">\'Hamburguer\'</span>, <span class="hljs-string">\'Churrasco\'</span>, <span class="hljs-string">\'Feijoada\'</span>],\n  <span class="hljs-attr">nerd</span>: <span class="hljs-literal">true</span>\n}\n</code></pre>\n<blockquote>\n<p>Exemplo adaptado do curso <a href="http://blog.da2k.com.br/curso-javascript-ninja/">Javascript ninja</a> do Fernando Daciuk. Recomendo!</p>\n</blockquote>\n<p>Esse exemplo nos ajuda a entender melhor como é feita essa estrutura, observe que sempre criamos uma chave antes de definirmos todo e qualquer tipo de valor, esse valor pode ser do tipo <code>String</code> (linhas 2 e 3), <code>Number</code> (linhas 4, 5 e 6), <code>function</code> (linha 7), <code>array</code> (linha 10) ou <code>boolean</code> (linha 11) entre outros tipos diversos como por exemplo <code>null</code>, <code>undefined</code> etc.</p>\n<h3>Dot Notation</h3>\n<p>Quando precisamos \'acessar\' alguma informação dentro de um objeto usamos a sintaxe chamada de <em>Dot notation</em>, não é a toa que o JSON está substituindo os antigos formatos XML para utilização de WebServices e APIs, veja como é simples acessar os itens no objeto pessoa que criamos no exemplo acima.</p>\n<p>Acessando atributos simples:</p>\n<pre><code class="language-js">pessoa.nome; <span class="hljs-comment">// Lucas</span>\npessoa.idade; <span class="hljs-comment">// 25</span>\npessoa.peso; <span class="hljs-comment">// 78</span>\npessoa.altura; <span class="hljs-comment">// 1.78</span>\n</code></pre>\n<p>Acessando functions:</p>\n<pre><code class="language-js">pessoa.nomeCompleto(); <span class="hljs-comment">// Lucas Maia</span>\n</code></pre>\n<p>Acessando arrays:</p>\n<pre><code class="language-js">pessoa.comidasPreferidas[<span class="hljs-number">0</span>]; <span class="hljs-comment">// Hambúrguer</span>\npessoa.comidasPreferidas[<span class="hljs-number">1</span>]; <span class="hljs-comment">// Churrasco</span>\npessoa.comidasPreferidas[<span class="hljs-number">2</span>]; <span class="hljs-comment">// Feijoada</span>\n</code></pre>\n<p>Como vamos trabalhar esses dados voltados para o armazenamento em banco, vamos nos deparar com diversas situações, em algumas das vezes as <em>collections</em> de dados ficarão bem simples em sua estrutura e em outras as estruturas ficarão um tanto quanto complexas. As estruturas simples em formato JSON são chamadas de <em>Basic Nesting</em>, e as complexas de <em>Deep Nesting</em>.</p>\n<h3>Basic Nesting</h3>\n<pre><code class="language-js">{\n  <span class="hljs-attr">produto</span>: <span class="hljs-string">"notebook"</span>,\n  <span class="hljs-attr">atributos</span>: { <span class="hljs-attr">tipo</span>: <span class="hljs-string">"Mac"</span>, <span class="hljs-attr">caro</span>: <span class="hljs-literal">true</span> },\n  <span class="hljs-attr">estoque</span>: <span class="hljs-number">5</span>\n}\n</code></pre>\n<p>Como você pode ver é uma estrutura bem simples de dados. Assim como sua leitura também é simples.</p>\n<h3>Deep Nesting</h3>\n<pre><code class="language-js">[\n  {\n    <span class="hljs-attr">filme</span>: <span class="hljs-string">\'Madrugada dos Mortos\'</span>,\n    <span class="hljs-attr">tituloOriginal</span>: <span class="hljs-string">\'Dawn of the Dead\'</span>,\n    <span class="hljs-attr">ano</span>: <span class="hljs-number">2006</span>,\n    <span class="hljs-attr">generos</span>: [<span class="hljs-string">\'suspense\'</span>, <span class="hljs-string">\'terror\'</span>],\n    <span class="hljs-attr">elenco</span>: [\n      {<span class="hljs-attr">diretor</span>: <span class="hljs-string">\'Zack Snyder\'</span>},\n      {<span class="hljs-attr">atores</span>: [<span class="hljs-string">\'Sarah Polley\'</span>, <span class="hljs-string">\'Ving Rhames\'</span>, <span class="hljs-string">\'Jake Weber\'</span>]},\n      {<span class="hljs-attr">autor</span>: <span class="hljs-string">\'George A. Romero\'</span>}\n    ]\n  },\n  {\n    <span class="hljs-attr">filme</span>: <span class="hljs-string">\'Contra o Tempo\'</span>,\n    <span class="hljs-attr">tituloOriginal</span>: <span class="hljs-string">\'Source Code\'</span>,\n    <span class="hljs-attr">ano</span>: <span class="hljs-number">2011</span>,\n    <span class="hljs-attr">generos</span>: [<span class="hljs-string">\'Ação\'</span>, <span class="hljs-string">\'Aventura\'</span>, <span class="hljs-string">\'Suspense\'</span>],\n    <span class="hljs-attr">elenco</span>: [\n      {<span class="hljs-attr">diretor</span>: <span class="hljs-string">\'Duncan Jones\'</span>},\n      {<span class="hljs-attr">atores</span>: [<span class="hljs-string">\'Jake Gyllenhaal\'</span>, <span class="hljs-string">\'Michelle M.\'</span>, <span class="hljs-string">\'Vera Farmiga\'</span>]},\n      {<span class="hljs-attr">autor</span>: <span class="hljs-string">\'Ben Ripley\'</span>}\n    ]\n  }\n]\n</code></pre>\n<p>As <em>deep nestings</em> são estuturas um pouco mais complexas, mas não são maneiras erradas de se guardar informações, como já havia dito antes, o MongoDB é um banco de dados não relacional, então é comum encontrarmos estruturas mais complexas de dados, pois como não existe relacionamentos entre documentos é perfeitamente normal que haja muitos dados em uma mesma collection ou em um mesmo <em>document</em>.</p>\n<h2>Conclusão</h2>\n<p>Espero que tenha ficado mais claro a sintaxe utilizada para se armazenar os dados no MongoDB, pois pressupondo isso já podemos entender as informações retornadas pelas <em>queries</em> que iremos trabalhar no próximo post da série. Gostaria de agradecer mais uma vez todos os feedbacks, vocês são demais.</p>\n</section>\n'},xPCo:function(s,a,e){"use strict";var o=e("d9EC"),n=e("vagE"),t=e("mLT5");e.n(t);a.a={head:function(){return{title:this.post.title}},components:{Disqus:o.a,Share:n.a},computed:{postContent:function(){var s=this.$route.params.id;return e("r/ZZ")("./"+s+".md")},disqusShortname:function(){return"bloglucasmaiaesilva"},disqusId:function(){return"production-"+this.disqusShortname+"-"+this.$route.params.id},title:function(){return this.$route.params.id},post:function(){var s=this;return t.posts.find(function(a){return a.slug===s.title})},url:function(){return"http://lucasmaiaesilva.com.br/"+this.title}},watch:{"$route.params.id":function(s,a){this.$refs.disqus.init()}}}},xraU:function(s,a){s.exports='<section><p>Olá amiguinhos!</p>\n<p>Depois de um breve período de tempo, resolvi voltar a escrever e hoje vou escrever sobre um tipo de tecnologia muito produtiva e performática de se usar, o <em>Jeet</em>.</p>\n<h2>Grids semânticos</h2>\n<p>Sabe quando você usa o Bootstrap por exemplo e sai colocando aquela tsunami de classes em seus elementos HTML? Pois é esses <em>presets</em> são oriundos do próprio framework e funcionam mais ou menos assim:</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-xs-12 col-sm-6 col-md-8"</span>&gt;</span>.col-xs-12 .col-sm-6 .col-md-8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-xs-6 col-md-4"</span>&gt;</span>.col-xs-6 .col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Optional: clear the XS cols if their content doesn\'t match in height --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"clearfix visible-xs-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>O código acima iria gerar um resultado mais ou menos assim:</p>\n<p><img src="/posts/jeet/bootstap-render.png" alt="Bootstrap Renderizado"></p>\n<p>Bom esse pelo menos é o jeito tradicional de se usar o bootstrap.</p>\n<p><img src="/posts/learn-english/ai-eu-te-pergunto.jpg" alt="Mas aí eu te pergunto"></p>\n<p>Será que chamar TODOS esses <em>presets</em> dentro do arquivo css é a <strong>melhor</strong> maneira de se fazer?</p>\n<p>Foi pensando nisso que surgiram os <a href="http://www.smashingmagazine.com/2011/08/the-semantic-grid-system-page-layout-for-tomorrow/">semantic grids</a> ou grids semânticos.</p>\n<p>A proposta desses sistemas de grids é usar <strong>somente</strong> o que for necessário dentro da página para formatar os elementos do nosso HTML. Isso é possível graças ao uso dos pré-processadores que &quot;renderizam&quot; os arquivos css dessa maneira. Mas como assim?</p>\n<p>Veja um exemplo:</p>\n<p><img src="/posts/jeet/html-basic-structure.png" alt="estrutura básica de uma página html"></p>\n<p>Suponhamos que precisaríamos de criar uma página semelhante a estrutura mostrada acima, um header, uma coluna maior que será o article e na mesma linha uma sidebar, e em baixo um footer também em bloco.</p>\n<p>Nosso HTML ficaria mais ou menos assim.</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>\n    Cabeçalho\n  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span>&gt;</span>\n    Article\n  <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>\n    Sidebar\n  <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>\n    Rodapé\n  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n</code></pre>\n<p>Nesse exemplo usarei o Stylus juntamente com o Jeet, nosso arquivo ficaria assim:</p>\n<pre><code class="language-styl"><span class="hljs-selector-tag">header</span>\n  stack()\n<span class="hljs-selector-class">.content</span>\n  col(<span class="hljs-number">10</span>/<span class="hljs-number">12</span>)\n<span class="hljs-selector-tag">aside</span>\n  col(<span class="hljs-number">2</span>/<span class="hljs-number">12</span>)\n<span class="hljs-selector-tag">footer</span>\n  stack()\n</code></pre>\n<p>Uma ressalva para as linhas 4 e 6 que substituem as classes <code>col-xs-10</code> e <code>col-xs-2</code> do bootstrap, respectivamente. Viu a diferença?</p>\n<p>Com o uso do Jeet não precisamos &quot;sujar&quot; o html, deixando tudo mais simples e prático.</p>\n<p>Isso porque esses grids utilizam mixins e variáveis para definir através do próprio CSS, a largura dos elementos, isto elimina a necessidade de inserir no html classes não-semanticas utilizadas em sistemas fixos.</p>\n<p>Fazendo isso, já seríamos capazes de reproduzir uma estrutura semelhante a da imagem acima, ou seja, com pouquíssimas linhas de código, já conseguimos muito resultado. Fazendo dessa maneira temos inúmeras vantagens em relação ao jeito bootstrap de fazer. São algumas delas:</p>\n<ol>\n<li>Produtividade - Pouca escrita e muito resultado</li>\n<li>Clean Code - Ou nesse caso, pré clean code</li>\n<li>Performance - Uma vez que não é necessário o carregamento de diversas classes</li>\n</ol>\n<p>Entre muitas outras.</p>\n<h3>Responsividade</h3>\n<p>E para inserir um pouco de responsividade ná página? Existem várias maneiras de se fazer isso, uma delas é acrescentando o <a href="http://jenius.github.io/rupture/">rupture</a> (um outro plugin do Stylus), com ele instalado podemos simplesmente fazer isso:</p>\n<pre><code class="language-styl">breakpoint = <span class="hljs-number">980px</span>\n\n<span class="hljs-selector-tag">header</span>\n  <span class="hljs-attribute">display</span> block\n  <span class="hljs-attribute">width</span> <span class="hljs-number">100%</span>\n<span class="hljs-selector-class">.content</span>\n  col(<span class="hljs-number">10</span>/<span class="hljs-number">12</span>)\n  +below(breakpoint)\n    stack()\n<span class="hljs-selector-tag">aside</span>\n   col(<span class="hljs-number">2</span>/<span class="hljs-number">12</span>)\n   +below(breakpoint)\n     stack()\n<span class="hljs-selector-tag">footer</span>\n   stack()\n</code></pre>\n<p>O comando <code>+below()</code> vem do <a href="http://jenius.github.io/rupture/">rupture</a>, ele recebe como parâmetro um valor que determina em qual momento ele irá mudar o comportamento da sua página, mais precisamente ele analisa a quantidade de pixels da tela do seu dispositivo e o que estiver identado como pertencente a ele será executado se for menor que a referência. Se você já tem costume de criar páginas responsivas isso não é muito diferente das convencionais <em>media queries</em>.</p>\n<h2>Jeet</h2>\n<p>Fazendo uso do poder dos pré-processadores, nós podemos usar frações reais ou representativas de código que podem gerar o valor das colunas em pixels e transformando estes valores em porcentagens.</p>\n<p>O Jeet como a própria <a href="http://jeet.gs/">documentação</a> diz, é um sistema de grid para humanos, ele possui a proposta de ter uma fácil leitura e escrita para que possamos descrever uma página de grid do jeito que o ser humano faria diferente de um bootstrap por exemplo, onde a interface não é muito amigável.</p>\n<p>By making use of the power of pre-processors, we can now pass real fractions (or float numbers) as context that generates a percentage based width and gutter for grids. We\'re able to do this while maintaining a consistently sized infinitely nestable gutter.</p>\n<h1>Grids semânticos com Jeet</h1>\n<p>Vamos a algumas de suas features.</p>\n<h3>Column ou Col</h3>\n<p>O comando <code>column</code> (também usado como <code>col</code>) talvez seja a feature mais &quot;forte&quot; de qualquer sistema de grid, como você pode ver nos exemplos anteriores é esse comando que cria as colunas com o espaçamento específico passado por parâmetro, juntamente com ele podemos usar alguns outros parâmetros importantes, são eles:</p>\n<h4>Offset</h4>\n<p>Esse comando é usado quando queremos &quot;pular&quot; o espaço passado por parâmetro. Segue um exemplo de sua utilização:</p>\n<pre><code class="language-styl"><span class="hljs-function"><span class="hljs-title">col</span><span class="hljs-params">(<span class="hljs-number">1</span>/<span class="hljs-number">4</span>, offset: <span class="hljs-number">1</span>/<span class="hljs-number">4</span>)</span></span>\n</code></pre>\n<h4>Cycle</h4>\n<p>Sabe quando temos vários elementos em linha e definimos um espaçamento padrão entre eles? O que acontece é que na maioria das vezes existe um certo gargalo na lógica desse espaçamento que geralmente é resolvido pela manipulação dos elementos filhos por css, tome o próprio blog como exemplo:</p>\n<p><a href="/posts/jeet/grid-blog.png"><img src="/posts/jeet/grid-blog.png" alt="Sistema de grid blog"></a></p>\n<p>A formatação da página inicial é feita com três posts por linha, e naturalmente quando se usa o <code>col</code> ele faz o espaçamento devido para deslocar os elementos em linha, porém nesse caso haverá possivelmente mais de uma linha, o que significa que devemos remover o espaço do último item do bloco para que não haja quebra desse espaçamento (para mais detalhes veja esse <a href="https://www.youtube.com/watch?v=roqlCwEn4iI">vídeo</a>), a referência usada para remover esse espaço é <code>cycle</code>. Veja um exemplo de sua utilização:</p>\n<pre><code class="language-styl"><span class="hljs-selector-class">.post</span>\n  col(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>, cycle:<span class="hljs-number">3</span>)\n</code></pre>\n<h4>Uncycle</h4>\n<p>Uncycle desfaz a formatação do cycle, é bem útil quando queremos adicionar algum comportamento responsivo ao nosso site.</p>\n<pre><code class="language-styl"><span class="hljs-selector-class">.post</span>\n  col(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>, cycle:<span class="hljs-number">3</span>)\n  +tablet()\n    col(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>, uncycle:<span class="hljs-number">3</span>, cycle:<span class="hljs-number">2</span>)\n</code></pre>\n<p>Bem auto-explicativo não? Quando a página for acessada pelo tablet (breakpoint definido pelo plugin rupture), ele irá trocar os elementos do grid para dois itens do bloco ao invés de três.</p>\n<h3>Span</h3>\n<p>O <code>span</code> possui basicamente o mesmo conceito do <code>col</code>, a única diferença é que no span não existe espaçamento.</p>\n<pre><code class="language-styl"><span class="hljs-function"><span class="hljs-title">span</span><span class="hljs-params">(<span class="hljs-number">3</span>/<span class="hljs-number">12</span>)</span></span>\n</code></pre>\n<p>Existem outras features do Jeet, mas não vou me atentar a explicar todas aqui, pois o post ficou bem maior do que esperava, mas se você chegou até aqui é porque, assim como eu, achou interessante a sua utilização, aconselho ler a documentação em sua <a href="http://jeet.gs/">página inicial</a>.</p>\n<h2>Conclusão</h2>\n<p>Quero deixar bem claro que usei o bootstrap como exemplo para explicar esse post devido a sua popularidade, mas isso se aplica a diversos outros como foundation, groundworkCSS e tantos outros que grids não semanticos. Mas não tenho nada contra a essas tecnologias. Esse post somente possui caráter explicativo, não estou aqui para falar mal de nenhuma tecnologia, somente para mostrar novas e melhores soluções para os problemas de sempre. Espero ter cumprido minha missão, qualquer dúvida / elogio / sugestão, deixe um comentário.</p>\n</section>\n'}});
//# sourceMappingURL=_id.de792c22278ce6f49ea7.js.map